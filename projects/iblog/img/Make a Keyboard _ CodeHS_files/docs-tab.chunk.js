(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{246:function(n,e,t){"use strict";t.r(e),t.d(e,"default",(function(){return y}));var a=t(14),o=t(15),r=t(17),i=t(18),s=t(1),l=t.n(s),h=t(241),d=t.n(h),c=t(242),u=t.n(c),m=(t(243),t(6)),p=t.n(m),g=t(3),f=new h.Renderer;f.code=function(n,e){var t=!(!e||!u.a.getLanguage(e))?u.a.highlight(e,n).value:n;return'<pre><code class="hljs '.concat(e,'">').concat(t,"</code></pre>")},d.a.setOptions({renderer:f});var y=function(n){Object(r.a)(t,n);var e=Object(i.a)(t);function t(){return Object(a.a)(this,t),e.apply(this,arguments)}return Object(o.a)(t,[{key:"shouldComponentUpdate",value:function(){return!1}},{key:"render",value:function(){if(this.props.iframeDocsURL)return l.a.createElement("div",{className:p.a.docs},l.a.createElement("iframe",{title:"docs",src:this.props.iframeDocsURL}));var n="Not yet implemented";switch(this.props.projectType){case g.l.JAVA:n=d()('Java Documentation\n------------------------\n\nWant more? Check out [full documentation](http://codehs.github.io/codehs-java-library/)!\n\n## Basics\n\n*   [Printing](#printing-to-console)\n*   [Variables](#variables)\n*   [Methods](#methods)\n*   [User Input](#user-input)\n*   [Comparison Operators](#comparison-operators)\n*   [Math](#math)\n*   [Randomizer](#randomizer)\n\n## Control Structures\n\n*   [Booleans](#booleans)\n*   [If/Else](#if-else)\n*   [For Loops](#for-loops)\n*   [While Loops](#while-loops)\n\n## Data Structures\n\n*   [Arrays](#arrays)\n*   [Array Methods](#array-methods)\n*   [ArrayList](#arraylist)\n*   [2D Arrays](#2d-arrays)\n*   [HashMap](#hashmap)\n\n## Classes\n\n*   [ConsoleProgram](#consoleprogram)\n*   [Character Methods](#character-methods)\n*   [Character Examples](#character-examples)\n*   [Math Methods](#math-methods)\n*   [Math Examples](#math-examples)\n*   [String Methods](#string-methods)\n*   [String Examples](#string-examples)\n*   [Extending Classes](#extending-classes)\n*   [Implementing Interfaces](#implementing-interfaces)\n*   [Comparable Interface](#comparable-interface)\n*   [List Interface](#list-interface)\n\n## Graphics\n\n*   [Circle](#circle)\n*   [Rectangle](#rectangle)\n*   [Line](#line)\n*   [Text](#text)\n*   [Color](#color)\n\n## Java Documentation\n\n### Printing to Console\n\n```java\nSystem.out.println(str);\nSystem.out.print(str);\n\n// Example:\nSystem.out.println("Hello world.");\n\n// Printing without a new line:\nSystem.out.print("Hello world. ");\nSystem.out.print("How are you?");\n```\n\n### Variables\n\n```java\n// Declare a variable\nint myVarName;\n\n// Initialize a variable\nint myVarName = 5;\n\n// Assign to an existing variable\nmyVarName = 10;\n\n// Print a variable\nSystem.out.println(myVarName);\nSystem.out.println("The value is: " + myValue);\n```\n\n### Methods\n\n```java\n// Methods can take in values, called parameters.\n// The method below takes in a parameter called\n// \'input\' and prints it.\nprivate void printText(String input)\n{\n  System.out.println(input);\n}\n\n// Methods can also return a value.\n// The method below takes in a value,\n// adds two to it, and returns it.\nprivate int addTwo(int number)\n{\n    return number + 2;\n}\n```\n\n### User Input\n\n```java\n// Read a string\nString str = readLine(prompt);\n\n// Read an integer\nint num = readInt(prompt);\n\n// Read a double\ndouble myDouble = readDouble(prompt);\n\n// Read a boolean\nboolean bool = readBoolean(prompt);\n\n// You should replace the word prompt with\n// the question you\'d like to ask. For example:\nString name = readLine("What is your name? ");\nint age = readInt("What is your age? ");\nboolean finishedWork = readBoolean("Is your work done? ");\n```\n\n### Comparison Operators\n\n```java\n// Comparison operators return booleans (true/false values)\n\nx == y         // is x equal to y\nx != y      // is x not equal to y\nx > y         // is x greater than y\nx >= y         // is x greater than or equal to y\nx < y         // is x less than y\nx <= y         // is x less than or equal to y\n\n// Comparison operators in if statements\nif (x == y)\n{\n  System.out.println("x and y are equal");\n}\n\nif (x > 5)\n{\n  System.out.println("x is greater than 5.");\n}\n```\n\n### Math\n\n```java\n// Operators:\n\\+    Addition\n\\-    Subtraction\n\\*    Multiplication\n/    Division\n%    Modulus (Remainder)\n() Parentheses (For order of operations)\n\n// Examples\nint z = x + y;\nint w = x * y;\n\n//Increment (add one)\nx++\n\n//Decrement (subtract one)\nx--\n\n//Shortcuts\nx = x + y;        x += y;\nx = x - y;        x -= y;\nx = x * y;        x *= y;\nx = x / y;        x /= y;\n```\n\n### Randomizer\n\n```java\n// The Randomizer class provides methods for creating random values\n\n// Examples\n\n// Random integer between low and high\nint low = 1;\nint high = 6;\nint roll = Randomizer.nextInt(low, high);\n\n// Random boolean value\nboolean coinFlip = Randomizer.nextBoolean();\n\n// Random boolean with a probability chance of being true\n// probability must be between 0 and 1\n\n// This coin flip has an 80% chance of being true\ndouble probability = 0.8;\nboolean coinFlip = Randomizer.nextBoolean(probability);\n\n// Random double value between 0 and 1\ndouble chanceOfRain = Randomizer.nextDouble();\n\n// Random double value between low and high\ndouble low = 2.0;\ndouble high = 5.0;\ndouble randomValue = Randomizer.nextDouble(low, high);\n\n// Methods\nRandomizer.nextInt(int low, int high)\nRandomizer.nextBoolean()\nRandomizer.nextBoolean(double probability)\nRandomizer.nextDouble()\nRandomizer.nextDouble(double low, double high)\n```\n\n### Booleans\n\n```java\n// A boolean is either true or false\nboolean myBoolean = true;\n\nboolean anotherBoolean = false;\n\nboolean result = readBoolean("Question? ");\n\n// Not Operator\nboolean x = !y;     // x gets the opposite of y\n\n// And Operator\nboolean andExp = x && y;\n\n// Or Operator\nboolean orExp = x || y;\n\n// You can combine many booleans!\nboolean boolExp = x && (y || z);\n```\n\n### If/Else\n\n```java\nif (BOOLEAN_EXPRESSION)\n{\n    // code to execute if true\n}\n\nif (BOOLEAN_EXPRESSION)\n{\n    // code if true\n}\nelse\n{\n    // code if false\n}\n\nif (x < 0)\n{\n  System.out.println("x is negative.");\n}\n\nif (color == "red" || color == "blue" || color == "yellow")\n{\n  System.out.println("Primary color.");\n}\nelse\n{\n  System.out.println("Not a primary color.");\n}\n\n// You can use else if if you have multiple\n// conditions, but only one should happen.\nif(condition_1)\n{\n\n}\nelse if (condition_2)\n{\n\n}\nelse if (condition_3)\n{\n\n}\nelse\n{\n\n}\n\n\n// You can always write these using nested\n// if/else. For example:\nif (condition_1)\n{\n    // this code runs if condition 1 is true\n}\nelse\n{\n\n    // this code runs if condition 1 is false\n\n    if (condition_2)\n    {\n        // this code runs if condition 2 is true\n    }\n    else\n    {\n        // this code runs if condition 2 is false\n    }\n}\n```\n\n### For Loops\n\n```java\nint COUNT = 5;\n\nfor (int i = 0; i < COUNT; i++)\n{\n    /\\* Repeat code betweeen the brackets 5 times,\n     \\* as the COUNT variable is 5. */\n}\n\n// Print numbers 0-9\nfor (int i = 0; i < 10; i++)\n{\n    System.out.println(i);\n}\n```\n\n### While Loops\n\n```java\nwhile (boolean expression)\n{\n    /\\* Repeat code betweeen brackets while\n     \\* \'boolean expression\' is true */\n}\n\n// Countdown from 15 to 10\nint i = 15;\nwhile (i > 10)\n{\n    System.out.println(i);\n    i--;\n}\n\n// This is a loop and a half format\nwhile (true)\n{\n    // code\n    if (condition)\n    {\n        break;\n    }\n}\n```\n\n### Arrays\n\n```java\n// Create an array of size 5\nint[] arr = new int[5];\n\n// Create an array that is initialized with values\nint[] arr = {7, 8, 9, 10};\n\n// to access a given index in an array\n// you can use the following syntax\narr[i]\n\n// for example, to print out the 5th element in the array:\nSystem.out.println(arr[4])\n// remember that arrays start with 0!\n\n// to loop through an array, you can use a standard\n// for loop, given an array of n elements arr\nfor (int i = 0; i < arr.length; i++)\n{\n    System.out.println(arr[i])\n}\n// this will print each element in a list on its own line\n```\n\n### Array Methods\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html)\n\n#### Static Methods\n\n```java\n// You\'ll need to import Arrays to use these methods\nimport java.util.Arrays;\n\n// Sort the given array into ascending order\nint[] arr = {18, 5, 9, 8, 1, 3}\nArrays.sort(arr)  // arr is now [1, 3, 5, 8, 9, 18]\n```\n\n### ArrayList\n\n```java\n// Don\'t forget to import ArrayList!\nimport java.util.ArrayList;\n\n// Create a general ArrayList\nArrayList<T> arrList = new ArrayList<T>();\n// where T represents a type (Object or primitive)\n\n// Create an ArrayList of ints and add some.\nArrayList<Integer> arrList = new ArrayList<Integer>();\n// ArrayLists contain objects, so instead of using primitive types\n// like int, we use their Object forms, like Integer.\narrList.add(1);\narrList.add(2);\narrList.add(3);\narrList.add(4)\n\n// to access a given index in an ArrayList\n// you can use the following syntax\narrList.get(i);\n// this can also be saved to a variable\nint arrListElem = arrList.get(2); // arrListElem = 3\n\n// for example, to print out the 3rd element in the ArrayList:\nSystem.out.println(arrList.get(2))\n// Like arrays, ArrayLists are indexed at 0.\n\n// you can remove in a similar way\narrList.remove(i);\n\n// to loop through an ArrayList, you can use a standard\n// for loop, given an ArrayList of n elements arrList\nfor (int i = 0; i < arrList.size(); i++)\n{\n    System.out.println(arrList.get(i))\n}\n// this will print each element in a list on its own line\n\n// you can also use a \'foreach\' loop\nfor (Integer i : arrList)\n{\n    System.out.println(i);\n}\n\n// for more documentation, check out the\n// official Oracle Documentation [here.](https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html)\n```\n\n### 2D Arrays\n\n```java\n// you can represent tables, grids, and matrices\n\n// make a 3x4 grid of ints\nint[][] grid = new int[3][4];\n\n// make a 3x3 grid of chars\nchar[][] grid = new char[3][3];\n\n// make a 10 x 3 grid of Strings\nString[][] grid = new String[10][3];\n\n// initialize a list\nint[][] grid = {\n    {1,2,3,4},\n    {5,6,7,8}\n};\n\n// get a row\nint[] row = grid[1]\n\n// get an element\nint elem = grid[1][2];\n```\n\n### HashMap\n\n```java\n// used to store key, value mappings\n\n// create a map\nHashMap<String, String> phonebook = new HashMap<String, String>();\n\n// put things in the map\nphonebook.put("Alan Turing", "312-423-1234");\n\n// figure out if a key is in the map\nboolean hasKey1 = phonebook.containsKey("Alan Turing")\nboolean hasKey2 = phonebook.containsKey("Karel the Dog");\nSystem.out.println(hasKey1);  // this will print true\nSystem.out.println(hasKey2);  // this will print false\n\n// get things from a map\nString alansNumber = phonebook.get("Alan Turing");\n\n// looping over a map\nSystem.out.println("The Full Phonebook");\nfor(String key: phonebook.keySet())\n{\n    String number = phonebook.get(key);\n    System.out.println(key + ": " + number);\n}\n```\n\n### ConsoleProgram\n\n```java\n// ConsoleProgram allows you to read easily from the console.\n// Extend ConsoleProgram in order to use these helpful methods.\n\nreadLine(String prompt);\nString name = readLine("What is your name? ");\n\nreadBoolean(String prompt);\nboolean likesIceCream = readBoolean("Do you like ice cream? ");\n\nreadDouble(String prompt);\ndouble gpa = readDouble("What is your GPA? ");\n\nreadInt(String prompt);\nint age = readInt("How old are you? ");\n```\n\n### Character Methods\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html)\n\n```java\n// The Character class allows for advanced\n// manipulations of characters in java.\n\n// These methods are static, which means they are called on the\n// Character class level, rather than on a specific Character object\n// To use these methods, simply call them on the class Character\n\n// For example\nstatic boolean isUpperCase(char ch)\n// Usage\nCharacter.isUpperCase(\'A\') // returns true\n\n// Methods\nstatic boolean isUpperCase(char ch)\n    returns true if ch is an uppercase character,\n    false otherwise\n\nstatic boolean isLowerCase(char ch)\n    returns true if ch is a lowerspace character,\n    false otherwise\n\nstatic boolean isDigit(char ch)\n    returns true if ch is a digit (a number),\n    false otherwise\n\nstatic boolean isLetter(char ch)\n    returns true if ch is a letter, false otherwise\n\nstatic boolean isLetterOrDigit(char ch)\n    returns true if ch is either a letter or a digit,\n    false otherwise\n\nstatic boolean isWhitespace(char ch)\n    returns true if ch is a whitespace character\n    (i.e. space or new line), false otherwise\n\nstatic char toUpperCase(char ch)\n    returns the uppercase version of ch\n\nstatic char toLowerCase(char ch)\n    returns the lowercase version of ch\n\n// learn more at the full reference linked above!\n```\n\n### Character Examples\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html)\n\n```java\n// The Character class allows for advanced\n// manipulations of characters in java.\n\n// Examples\n\n// isUpperCase\nchar ch = \'d\';\nboolean upper = Character.isUpperCase(ch);  // upper is false\nupper = Character.isUpperCase(\'D\');         // upper is true\nupper = Character.isUpperCase(\' \');         // upper is false\nupper = Character.isUpperCase(\'1\');         // upper is false\n\n// isLowerCase\nchar ch = \'d\';\nboolean lower = Character.isLowerCase(ch);  // lower is true\nlower = Character.isLowerCase(\'D\');         // lower is false\nlower = Character.isLowerCase(\' \');         // lower is false\nlower = Character.isLowerCase(\'1\');         // lower is false\n\n// Checking for letter or digit\n// isLetter, isDigit, isLetterOrDigit\nchar ch = \'d\';\nboolean isLetter = Character.isLetter(ch);  // isLetter is true\nboolean isDigit = Character.isDigit(ch);    // isDigit is false\nboolean either = Character.isLetterOrDigit(ch); // either is true\n\nisDigit = Character.isDigit(\' \');           // isDigit is false\nisDigit = Character.isDigit(\'9\');           // isDigit is true\n\neither = Character.isLetterOrDigit(\'9\');    // either is true\neither = Character.isLetterOrDigit(\' \');    // either is false\n\n// Checking for whitespace like space \' \' or new line \'\\\\n\'\n// isWhitespace\nchar space = \' \';\nboolean whiteSpace = Character.isWhitespace(space); // whitespace is true\n\nwhiteSpace = Character.isWhitespace(\'\\\\n\'); // whitespace is true\nwhiteSpace = Character.isWhitespace(\'8\');  // whitespace is false\nwhiteSpace = Character.isWhitespace(\'A\');  // whitespace is false\n\n// toUpperCase and toLowerCase\nchar lowerD = \'d\';\nchar upper = Character.toUpperCase(lowerD);  // upper is \'D\'\nchar lower = Character.toLowerCase(upper);   // lower is \'d\'\n\n// learn more at the full reference linked above!\n```\n\n### Math Methods\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html)\n\n```java\n// The Math class allows for advanced\n// calculations in java.\n\n// These methods are static, which means they are called on the\n// Math class level, rather than on a specific Math object\n// To use these methods, simply call them on the class Math\n\n// For example\nstatic double abs(double a)\n// Usage\ndouble result = Math.abs(-14);  // result is 14\n\n// Methods\nstatic int abs(int a)\nstatic double abs(double a)\n    returns the absolute value of a\n\nstatic long round(double a)\nstatic int(float a)\n    returns the closest number, with ties (1.5) rounding up\n\nstatic int max(int a, int b)\nstatic double max(double a, double b)\n    returns the greater of two values a and b\n\nstatic int min(int a, int b)\nstatic double min(double a, double b)\n    returns the lower of two values a and b\n\nstatic double pow(double a, double b)\n    returns a raised to the power of b\n\nstatic double sqrt(double a)\n    returns the square root of a\n\nstatic double floor(double a)\n    returns the greatest value less than\n    or equal to a\n\nstatic double ceil(double a)\n    returns the lowest value greater than\n    or equal to a\n\n// learn more at the full reference linked above!\n```\n\n### Math Examples\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html)\n\n```java\n// The Math class allows for advanced\n// calculations in java.\n\n// Examples\n\n// Absolute value\n// abs\ndouble val = -5.5;\ndouble abs = Math.abs(val); // abs is 5.5\n\nint num = 5;\nint abs = Math.abs(num);    // abs is 5\n\n// Rounding\ndouble x = 1.3;\nint roundedX = (int) Math.round(x); // 1\n\ndouble y = 1.5;\nint roundedY = (int) Math.round(y); // 2\n\ndouble z = 1.7;\nint roundedZ = (int) Math.round(z); // 2\n\n// Maximum of two values\n// max\nint max = Math.max(4, 5);   // max is 5\nmax = Math.max(-4, -5);     // max is -4\n\ndouble max = Math.max(3.0, -2.1);   // max is 3.0\nmax = Math.max(-2.2, -10.2);        // max is -2.2\n\n// Minimum of two values\n// min\nint min = Math.min(10, 1);  // min is 1\nmin = Math.min(-10, -11);   // min is -11\n\ndouble min = Math.min(9.4, 11.1);   // min is 9.4\nmin = Math.min(2.2, -9.5);          // min is -9.5\n\n// Exponents (a raised to the power of b)\n// pow\ndouble base = 4;\ndouble exp = 2;\ndouble power = Math.pow(base, exp);  // power is 16.0 (4 * 4 = 16)\n\npower = Math.pow(1, 4);  // power is 1.0 (1 * 1 * 1 * 1 = 1)\n\n// Square root\n// sqrt\ndouble root = Math.sqrt(25);        // root is 5.0\nroot = Math.sqrt(16);               // root is 4.0\nroot = Math.sqrt(root);             // root is 2.0\n\n// Floor -- Greatest value lower than the parameter\n// floor\ndouble floor = Math.floor(8.323);   // floor is 8.0\nfloor = Math.floor(-8.323);         // floor is -9.0\n\n// Ceiling -- Lowest value greater than the parameter\n// ceil\ndouble ceiling = Math.ceil(8.323);  // ceiling is 9.0\nceiling = Math.ceil(-8.323);        // ceiling is -8.0\n\n// learn more at the full reference linked above!\n```\n\n### String Methods\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)\n\n```java\n// The String class allows for advanced\n// manipulations of Strings in Java.\n\n// Methods\nchar charAt(int index)\n    returns the character in the String\n    at the specified index.\n\nboolean equals(String other)\n    returns whether this string is equal\n    to a different String other\n\nboolean equalsIgnoreCase(String other)\n    returns whether this string is equal\n    to a different String other, ignoring\n    differences in upper and lower case\n\nint indexOf(char ch)\n    returns the index within this String\n    of the first occurance of the specified\n    character ch. If ch does not exist in\n    this String, -1 is returned\n\nint indexOf(String str)\n    returns the index within this String\n    of the first occurance of the specified\n    substring str. If str does not exist\n    inside this String, -1 is returned\n\nint length()\n    returns the length of this String\n\nString substring(int beginIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the end of the string\n\nString substring(int beginIndex, int endIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the specified endIndex.\n    The substring includes the character\n    at beginIndex, but does not include\n    the character at endIndex.\n\nboolean startsWith(String str)\n    returns true if this String starts\n    with the specified String str,\n    false otherwise\n\nboolean endsWith(String str)\n    returns true if this String ends\n    with the specified String str,\n    false otherwise\n\nString toLowerCase()\n    returns a new String containing\n    the same characters as this String\n    converted to lower case\n\nString toUpperCase()\n    returns a new String containing\n    the same characters as this String\n    converted to upper case\n\n// learn more at the full reference linked above!\n```\n\n### String Examples\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)\n\n```java\n// The String class allows for advanced\n// manipulations of Strings in Java.\n\n// Examples\n\n// Creating Strings\nString hello = "hello";\nString empty = "";\nString sentece = "The quick brown fox jumps over the lazy dog.";\n\n// Accessing characters in a String\n// charAt\nString str = "Hello World!";\n\nchar first = str.charAt(0);  // first is \'H\'\nchar middle = str.charAt(6);  // middle is \'W\'\n\n// Checking for equality\n// equals and equalsIgnoreCase\nString str = "CodeHS";\nString lower = "codehs";\n\nboolean isEqual = str.equals("CodeHS"); // isEqual is true\nisEqual = str.equals(lower);         // isEqual is false\n\nboolean similar = str.equalsIgnoreCase(lower); // similar is true\n\n// Finding characters and substrings\n// indexOf\nString str = "Hello World!";\n\nint index = str.indexOf(\'H\'); // index is 0\nindex = str.indexOf(\'o\');     // index is 4\nindex = str.indexOf("World"); // index is 6\nindex = str.indexOf("Hello"); // index is 0\n\n// Getting the length of a String\n// length\nString str = "Hello";\nint length = str.length();  // length is 5\n\nstr = "A";\nlength = str.length();      // length is 1\n\nstr = "";\nlength = str.length();      // length is 0\n\n// Getting substrings of a String\n// substring\nString str = "CodeHS";\n\nString sub = str.substring(4); // sub is "HS"\nsub = str.substring(1);        // sub is "odeHS"\nsub = str.substring(1, 4);     // sub is "ode"\nsub = str.substring(0, 1);     // sub is "C"\n\n// Checking for beginnings and endings of a String\n// startsWith and endsWith\nString str = "CodeHS";\n\nboolean codeStart = str.startsWith("Code"); // codeStart is true\nboolean hsStart = str.startsWith("HS");     // hsStart false\n\nboolean codeEnd = str.endsWith("Code");     // codeEnd is false\nboolean hsEnd = str.endsWith("HS");         // hsEnd is true\n\n// Converting the case of characters in a String\n// toLowerCase and toUpperCase\nString str = "CodeHS";\nString hello = "Hello World!";\n\nString lower = str.toLowerCase();   // lower is "codehs"\nString upper = lower.toUpperCase(); // upper is "CODEHS"\n\nupper = hello.toUpperCase();        // upper is "HELLO WORLD!"\nlower = upper.toLowerCase();        // lower is "hello world!"\n\n// learn more at the full reference linked above!\n```\n\n### Extending Classes\n\n```java\n// using extends in Java means that one class inherits\n// from another.\n\n// for example, a Jet class could extend Plane\npublic class Jet extends Plane\n{\n    // Jet specific code here\n}\n\n// sometimes you will need to call a method from the\n// class you inherited from, known as the parent class.\n\nsuper.fly(); // this will class the parent class\' fly method\n```\n\n### Implementing Interfaces\n\n```java\n// implementing in Java is similar to using a blueprint.\n// an Interface gives methods classes must implement.\npublic interface Blueprint\n{\n    public String address = "10 Downing Street"\n    public void printAddress();\n}\n\npublic class Building implements Blueprint {\n    // we have to declare a method with the same\n    // signature as the interface.\n    public void printAddress()\n    {\n        // you can use interface variables like static variables\n        System.out.println(Blueprint.address);\n    }\n}\n```\n\n### Comparable Interface\n\n```java\n// A class can implement Comparable and then take advantage of other\n// utilities to help order objects of the class (useful for sorting)\n\n// Compares the current instance to the other object and return\n// a number indicating ordering. You should return 0 if they are\n// equal and a negative or positive number depending on ordering\npublic int compareTo(Object o)\n\n// For purposes of ordering circles\npublic int compareTo(Circle other)\n{\n    double diff = gerRadius() - other.getRadius();\n    return (int)Math.signum(diff);\n}\n```\n\n### List Interface\n\n```java\n// Defines methods classes can implement in order to\n// represent an ordered List\n// List is an interface that defines abstract method signatures\n\n// Some important methods of List interface:\n\n// Returns the number of elements in a list\nint size()\n\n// Adds the given element to the end of the list\nboolean add(E elem)\n\n// Adds the given element at the specified index, shifts the subsequent\n// elements up one index\nvoid add(int index, E elem)\n\n// Returns the element at the specified index\nE get(int index)\n\n// Replaces the element at the given index with the elem\n// provided. Returns the old element that was replaced\nE set(int index, E elem)\n\n// Classes can implement List\nArrayList<E> implements List<E>\n\nList<String> strList = new ArrayList<String>();\nList<MyClass> myList = new ArrayList<MyClass>();\n\n// How to use List\npublic void printOddIndices (List<integer> list)\n{\n// Can use methods like list.add(4), list.size(), etc.\n}\n```\n\n### Graphics\n\n#### Circle\n\n```java\n// To make a circle\nCircle circle = new Circle(radius);\n\n// To set the location of the center of the circle\ncircle.setPosition(x, y);\n\n// Example, red circle with 50px radius with center at (100, 200)\nCircle circle = new Circle(50);\ncircle.setPosition(100, 200);\ncircle.setColor(Color.red);\n\n// Get the radius\ncircle.getRadius();                 // returns 50\ndouble curRadius = circle.getRadius(); // store in variable\n\n// Change the radius\ncircle.setRadius(100);\n\n// Get the position of the center of the circle\ndouble x = circle.getX();  // x is 100\ndouble y = circle.getY();  // y is 200\n\n// Change the location of the circle\ndouble x = getWidth() / 2;\ndouble y = getHeight() / 2;\ncircle.setPosition(x, y);   // circle center is in the center of the screen\n\n// Add to screen\nadd(circle);\n\n// Move the circle dx horizontally and dy vertically\ncircle.move(dx, dy);\n```\n\n#### Rectangle\n\n```java\n// To make a rectangle\nRectangle rect = new Rectangle(width, height);\n\n// To set location of the upper left corner of rectangle\nrect.setPosition(x, y);\n\n// Example, 200x50 blue rectangle with upper left corner at (100, 200)\nRectangle rect = new Rectangle(200, 50);\nrect.setPosition(100, 200);\nrect.setColor(Color.blue);\n\n// Get location of the upper left corner of the rectangle\ndouble x = rect.getX(); // x is 100\ndouble y = rect.getY(); // y is 200\n\n// Change location of the rectangle\ndouble x = getWidth() / 2;\ndouble y = getHeight() / 2;\nrect.setPosition(x, y)  // upper left corner is at center of screen\n\n// Add to screen\nadd(rect);\n\n// Move the rect dx horizontally and dy vertically\nrect.move(dx, dy);\n```\n\n#### Line\n\n```java\n// To draw a line from (x1, y1) to (x2, y2)\nLine line = new Line(x1, y1, x2, y2);\n\n// Set the line color to green\nline.setColor(Color.green);\n\n// Set the line width to 10 pixels\nline.setLineWidth(10);\n\n// Add to screen\nadd(line);\n\n// Change the starting point of the line to (x1, y1)\nline.setPosition(x1, y1);\n\n// Change the end point of the line to (x2, y2)\nline.setEndpoint(x2, y2);\n\n//Get the starting point of the line\ndouble x = line.getX();    // x has same value as x1\ndouble y = line.getY();    // y has same value as y1\n\n//Get the ending point of the line\ndouble endX = line.getEndX();    // x has same value as x2\ndouble endY = line.getEndY();    // y has same value as y2\n\n// Move the line dx horizontally and dy vertically\nline.move(dx, dy);\n```\n\n#### Text\n\n```java\n// To make a graphical text object\nText txt = new Text(label, font);\n\n// To set the position of the lower left corner of the text\ntxt.setPosition(x, y);\n\n// Example\nText txt = new Text("Hello, world!", "30pt Arial");\ntxt.setPosition(100, 200);\ntxt.setColor(Color.blue);\n\n// Change what the text says\ntxt.setText("Goodbye!");\n\n// Get the location of the lower left corner of text\ndouble x = txt.getX(); // x is 100\ndouble y = txt.getY(); // y is 200\n\n// Add to screen\nadd(txt);\n\n// Move the text dx horizontally and dy vertically\ntxt.move(dx, dy);\n```\n\n#### Color\n\n```java\n// There are many color constants. You can set an objects\n// color like\nobj.setColor(color);\n\n// Specifically,\nobj.setColor(Color.RED);\n\n// List of available colors:\nColor.RED\nColor.GREEN\nColor.BLUE\nColor.YELLOW\nColor.CYAN\nColor.ORANGE\nColor.WHITE\nColor.BLACK\nColor.GRAY\nColor.PURPLE\n\n// Another way to set the color of an object is to use a\n// string with the hexadecimal color value with setColor.\n// For example, to set a rect object to be pink:\nrect.setColor("#FF66CC");\n\n// Get a random color from the randomizer\nString color = Randomizer.nextColor();\n```\n\n```\n\n```\n');break;case g.l.JAVA_CONSOLE:n=d()('## Java Documentation\n\nWant more? Check out [full documentation](http://codehs.github.io/codehs-java-library/)!\n\n### Basics\n*   [Printing](#printing-to-console)\n*   [Variables](#variables)\n*   [Methods](#methods)\n*   [User Input](#user-input)\n*   [Comparison Operators](#comparison-operators)\n*   [Math](#math)\n*   [Randomizer](#randomizer)\n\n### Control Structures\n*   [Booleans](#booleans)\n*   [If/Else](#if-else)\n*   [For Loops](#for-loops)\n*   [While Loops](#while-loops)\n\n### Data Structures\n*   [Arrays](#arrays)\n*   [Array Methods](#array-methods)\n*   [ArrayList](#arraylist)\n*   [2D Arrays](#2d-arrays)\n*   [Hashmap](#hashmap)\n\n### Classes\n*   [ConsoleProgram](#consoleprogram)\n*   [Character Methods](#character-methods)\n*   [Character Examples](#character-examples)\n*   [Math Methods](#math-methods)\n*   [Math Examples](#math-examples)\n*   [String Methods](#string-methods)\n*   [String Examples](#string-examples)\n*   [Extending Classes](#extending-classes)\n*   [Implementing Interfaces](#implementing-interfaces)\n*   [Comparable Interface](#comparable-interface)\n*   [List Interface](#list-interface)\n\n### Graphics\n*   [Circle](#circle)\n*   [Rectangle](#rectangle)\n*   [Line](#line)\n*   [Text](#text)\n*   [Color](#color)\n\n### Printing to Console\n```java\nSystem.out.println(str);\nSystem.out.print(str);\n\n// Example:\nSystem.out.println("Hello world.");\n\n// Printing without a new line:\nSystem.out.print("Hello world. ");\nSystem.out.print("How are you?");\n```\n\n### Variables\n```java\n// Declare a variable\nint myVarName;\n\n// Initialize a variable\nint myVarName = 5;\n\n// Assign to an existing variable\nmyVarName = 10;\n\n// Print a variable\nSystem.out.println(myVarName);\nSystem.out.println("The value is: " + myValue);\n```\n### Methods\n```java\n// Methods can take in values, called parameters.\n// The method below takes in a parameter called\n// \'input\' and prints it.\nprivate void printText(String input)\n{\n  System.out.println(input);\n}\n\n// Methods can also return a value.\n// The method below takes in a value,\n// adds two to it, and returns it.\nprivate int addTwo(int number)\n{\n    return number + 2;\n}\n```\n### User Input\n```java\n// Read a string\nString str = readLine(prompt);\n\n// Read an integer\nint num = readInt(prompt);\n\n// Read a double\ndouble myDouble = readDouble(prompt);\n\n// Read a boolean\nboolean bool = readBoolean(prompt);\n\n// You should replace the word prompt with\n// the question you\'d like to ask. For example:\nString name = readLine("What is your name? ");\nint age = readInt("What is your age? ");\nboolean finishedWork = readBoolean("Is your work done? ");\n```\n### Comparison Operators\n```java\n// Comparison operators return booleans (true/false values)\n\nx == y         // is x equal to y\nx != y      // is x not equal to y\nx > y         // is x greater than y\nx >= y         // is x greater than or equal to y\nx < y         // is x less than y\nx <= y         // is x less than or equal to y\n\n// Comparison operators in if statements\nif (x == y)\n{\n  System.out.println("x and y are equal");\n}\n\nif (x > 5)\n{\n  System.out.println("x is greater than 5.");\n}\n```\n### Math\n```java\n// Operators:\n+    Addition\n-    Subtraction\n*    Multiplication\n/    Division\n%    Modulus (Remainder)\n() Parentheses (For order of operations)\n\n// Examples\nint z = x + y;\nint w = x * y;\n\n//Increment (add one)\nx++\n\n//Decrement (subtract one)\nx--\n\n//Shortcuts\nx = x + y;        x += y;\nx = x - y;        x -= y;\nx = x * y;        x *= y;\nx = x / y;        x /= y;\n```\n### Randomizer\n```java\n// The Randomizer class provides methods for creating random values\n\n// Examples\n\n// Random integer between low and high\nint low = 1;\nint high = 6;\nint roll = Randomizer.nextInt(low, high);\n\n// Random boolean value\nboolean coinFlip = Randomizer.nextBoolean();\n\n// Random boolean with a probability chance of being true\n// probability must be between 0 and 1\n\n// This coin flip has an 80% chance of being true\ndouble probability = 0.8;\nboolean coinFlip = Randomizer.nextBoolean(probability);\n\n// Random double value between 0 and 1\ndouble chanceOfRain = Randomizer.nextDouble();\n\n// Random double value between low and high\ndouble low = 2.0;\ndouble high = 5.0;\ndouble randomValue = Randomizer.nextDouble(low, high);\n\n// Methods\nRandomizer.nextInt(int low, int high)\nRandomizer.nextBoolean()\nRandomizer.nextBoolean(double probability)\nRandomizer.nextDouble()\nRandomizer.nextDouble(double low, double high)\n```\n### Booleans\n```java\n// A boolean is either true or false\nboolean myBoolean = true;\n\nboolean anotherBoolean = false;\n\nboolean result = readBoolean("Question? ");\n\n// Not Operator\nboolean x = !y;     // x gets the opposite of y\n\n// And Operator\nboolean andExp = x && y;\n\n// Or Operator\nboolean orExp = x || y;\n\n// You can combine many booleans!\nboolean boolExp = x && (y || z);\n```\n### If/Else\n```java\nif (BOOLEAN_EXPRESSION)\n{\n    // code to execute if true\n}\n\nif (BOOLEAN_EXPRESSION)\n{\n    // code if true\n}\nelse\n{\n    // code if false\n}\n\nif (x < 0)\n{\n  System.out.println("x is negative.");\n}\n\nif (color == "red" || color == "blue" || color == "yellow")\n{\n  System.out.println("Primary color.");\n}\nelse\n{\n  System.out.println("Not a primary color.");\n}\n\n// You can use else if if you have multiple\n// conditions, but only one should happen.\nif(condition_1)\n{\n\n}\nelse if (condition_2)\n{\n\n}\nelse if (condition_3)\n{\n\n}\nelse\n{\n\n}\n\n\n// You can always write these using nested\n// if/else. For example:\nif (condition_1)\n{\n    // this code runs if condition 1 is true\n}\nelse\n{\n\n    // this code runs if condition 1 is false\n\n    if (condition_2)\n    {\n        // this code runs if condition 2 is true\n    }\n    else\n    {\n        // this code runs if condition 2 is false\n    }\n}\n```\n### For Loops\n```java\nint COUNT = 5;\n\nfor (int i = 0; i < COUNT; i++)\n{\n    /* Repeat code betweeen the brackets 5 times,\n     * as the COUNT variable is 5. */\n}\n\n// Print numbers 0-9\nfor (int i = 0; i < 10; i++)\n{\n    System.out.println(i);\n}\n```\n### While Loops\n```java\nwhile (boolean expression)\n{\n    /* Repeat code betweeen brackets while\n     * \'boolean expression\' is true */\n}\n\n// Countdown from 15 to 10\nint i = 15;\nwhile (i > 10)\n{\n    System.out.println(i);\n    i--;\n}\n\n// This is a loop and a half format\nwhile (true)\n{\n    // code\n    if (condition)\n    {\n        break;\n    }\n}\n```\n### Arrays\n```java\n// Create an array of size 5\nint[] arr = new int[5];\n\n// Create an array that is initialized with values\nint[] arr = {7, 8, 9, 10};\n\n// to access a given index in an array\n// you can use the following syntax\narr[i]\n\n// for example, to print out the 5th element in the array:\nSystem.out.println(arr[4])\n// remember that arrays start with 0!\n\n// to loop through an array, you can use a standard\n// for loop, given an array of n elements arr\nfor (int i = 0; i < arr.length; i++)\n{\n    System.out.println(arr[i])\n}\n// this will print each element in a list on its own line\n```\n### Array Methods\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html)\n#### Static Methods\n```java\n// You\'ll need to import Arrays to use these methods\nimport java.util.Arrays;\n\n// Sort the given array into ascending order\nint[] arr = {18, 5, 9, 8, 1, 3};\nArrays.sort(arr);  // arr is now [1, 3, 5, 8, 9, 18]\n```\n### ArrayList\n```java\n// Don\'t forget to import ArrayList!\nimport java.util.ArrayList;\n\n// Create a general ArrayList\nArrayList<T> arrList = new ArrayList<T>();\n// where T represents a type (Object or primitive)\n\n// Create an ArrayList of ints and add some.\nArrayList<Integer> arrList = new ArrayList<Integer>();\n// ArrayLists contain objects, so instead of using primitive types\n// like int, we use their Object forms, like Integer.\narrList.add(1);\narrList.add(2);\narrList.add(3);\narrList.add(4)\n\n// to access a given index in an ArrayList\n// you can use the following syntax\narrList.get(i);\n// this can also be saved to a variable\nint arrListElem = arrList.get(2); // arrListElem = 3\n\n// for example, to print out the 3rd element in the ArrayList:\nSystem.out.println(arrList.get(2))\n// Like arrays, ArrayLists are indexed at 0.\n\n// you can remove in a similar way\narrList.remove(i);\n\n// to loop through an ArrayList, you can use a standard\n// for loop, given an ArrayList of n elements arrList\nfor (int i = 0; i < arrList.size(); i++)\n{\n    System.out.println(arrList.get(i))\n}\n// this will print each element in a list on its own line\n\n// you can also use a \'foreach\' loop\nfor (Integer i : arrList)\n{\n    System.out.println(i);\n}\n\n// for more documentation, check out the\n// official Oracle Documentation [here.](https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html)\n```\n### 2D Arrays\n```java\n// you can represent tables, grids, and matrices\n\n// make a 3x4 grid of ints\nint[][] grid = new int[3][4];\n\n// make a 3x3 grid of chars\nchar[][] grid = new char[3][3];\n\n// make a 10 x 3 grid of Strings\nString[][] grid = new String[10][3];\n\n// initialize a list\nint[][] grid = {\n    {1,2,3,4},\n    {5,6,7,8}\n};\n\n// get a row\nint[] row = grid[1]\n\n// get an element\nint elem = grid[1][2];\n```\n### Hashmap\n```java\n// used to store key, value mappings\n\n// create a map\nHashMap<String, String> phonebook = new HashMap<String, String>();\n\n// put things in the map\nphonebook.put("Alan Turing", "312-423-1234");\n\n// figure out if a key is in the map\nboolean hasKey1 = phonebook.containsKey("Alan Turing")\nboolean hasKey2 = phonebook.containsKey("Karel the Dog");\nSystem.out.println(hasKey1);  // this will print true\nSystem.out.println(hasKey2);  // this will print false\n\n// get things from a map\nString alansNumber = phonebook.get("Alan Turing");\n\n// looping over a map\nSystem.out.println("The Full Phonebook");\nfor(String key: phonebook.keySet())\n{\n    String number = phonebook.get(key);\n    System.out.println(key + ": " + number);\n}\n```\n### ConsoleProgram\n```java\n// ConsoleProgram allows you to read easily from the console.\n// Extend ConsoleProgram in order to use these helpful methods.\n\nreadLine(String prompt);\nString name = readLine("What is your name? ");\n\nreadBoolean(String prompt);\nboolean likesIceCream = readBoolean("Do you like ice cream? ");\n\nreadDouble(String prompt);\ndouble gpa = readDouble("What is your GPA? ");\n\nreadInt(String prompt);\nint age = readInt("How old are you? ");\n```\n### Character Methods\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html)\n```java\n// The Character class allows for advanced\n// manipulations of characters in java.\n\n// These methods are static, which means they are called on the\n// Character class level, rather than on a specific Character object\n// To use these methods, simply call them on the class Character\n\n// For example\nstatic boolean isUpperCase(char ch)\n// Usage\nCharacter.isUpperCase(\'A\') // returns true\n\n// Methods\nstatic boolean isUpperCase(char ch)\n    returns true if ch is an uppercase character,\n    false otherwise\n\nstatic boolean isLowerCase(char ch)\n    returns true if ch is a lowerspace character,\n    false otherwise\n\nstatic boolean isDigit(char ch)\n    returns true if ch is a digit (a number),\n    false otherwise\n\nstatic boolean isLetter(char ch)\n    returns true if ch is a letter, false otherwise\n\nstatic boolean isLetterOrDigit(char ch)\n    returns true if ch is either a letter or a digit,\n    false otherwise\n\nstatic boolean isWhitespace(char ch)\n    returns true if ch is a whitespace character\n    (i.e. space or new line), false otherwise\n\nstatic char toUpperCase(char ch)\n    returns the uppercase version of ch\n\nstatic char toLowerCase(char ch)\n    returns the lowercase version of ch\n\n// learn more at the full reference linked above!\n```\n### Character Examples\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Character.html)\n```java\n// The Character class allows for advanced\n// manipulations of characters in java.\n\n// Examples\n\n// isUpperCase\nchar ch = \'d\';\nboolean upper = Character.isUpperCase(ch);  // upper is false\nupper = Character.isUpperCase(\'D\');         // upper is true\nupper = Character.isUpperCase(\' \');         // upper is false\nupper = Character.isUpperCase(\'1\');         // upper is false\n\n// isLowerCase\nchar ch = \'d\';\nboolean lower = Character.isLowerCase(ch);  // lower is true\nlower = Character.isLowerCase(\'D\');         // lower is false\nlower = Character.isLowerCase(\' \');         // lower is false\nlower = Character.isLowerCase(\'1\');         // lower is false\n\n// Checking for letter or digit\n// isLetter, isDigit, isLetterOrDigit\nchar ch = \'d\';\nboolean isLetter = Character.isLetter(ch);  // isLetter is true\nboolean isDigit = Character.isDigit(ch);    // isDigit is false\nboolean either = Character.isLetterOrDigit(ch); // either is true\n\nisDigit = Character.isDigit(\' \');           // isDigit is false\nisDigit = Character.isDigit(\'9\');           // isDigit is true\n\neither = Character.isLetterOrDigit(\'9\');    // either is true\neither = Character.isLetterOrDigit(\' \');    // either is false\n\n// Checking for whitespace like space \' \' or new line \'\\n\'\n// isWhitespace\nchar space = \' \';\nboolean whiteSpace = Character.isWhitespace(space); // whitespace is true\n\nwhiteSpace = Character.isWhitespace(\'\\n\'); // whitespace is true\nwhiteSpace = Character.isWhitespace(\'8\');  // whitespace is false\nwhiteSpace = Character.isWhitespace(\'A\');  // whitespace is false\n\n// toUpperCase and toLowerCase\nchar lowerD = \'d\';\nchar upper = Character.toUpperCase(lowerD);  // upper is \'D\'\nchar lower = Character.toLowerCase(upper);   // lower is \'d\'\n\n// learn more at the full reference linked above!\n```\n### Math Methods\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html)\n```java\n// The Math class allows for advanced\n// calculations in java.\n\n// These methods are static, which means they are called on the\n// Math class level, rather than on a specific Math object\n// To use these methods, simply call them on the class Math\n\n// For example\nstatic double abs(double a)\n// Usage\ndouble result = Math.abs(-14);  // result is 14\n\n// Methods\nstatic int abs(int a)\nstatic double abs(double a)\n    returns the absolute value of a\n\nstatic long round(double a)\nstatic int(float a)\n    returns the closest number, with ties (1.5) rounding up\n\nstatic int max(int a, int b)\nstatic double max(double a, double b)\n    returns the greater of two values a and b\n\nstatic int min(int a, int b)\nstatic double min(double a, double b)\n    returns the lower of two values a and b\n\nstatic double pow(double a, double b)\n    returns a raised to the power of b\n\nstatic double sqrt(double a)\n    returns the square root of a\n\nstatic double floor(double a)\n    returns the greatest value less than\n    or equal to a\n\nstatic double ceil(double a)\n    returns the lowest value greater than\n    or equal to a\n\n// learn more at the full reference linked above!\n```\n### Math Examples\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/Math.html)\n```java\n// The Math class allows for advanced\n// calculations in java.\n\n// Examples\n\n// Absolute value\n// abs\ndouble val = -5.5;\ndouble abs = Math.abs(val); // abs is 5.5\n\nint num = 5;\nint abs = Math.abs(num);    // abs is 5\n\n// Rounding\ndouble x = 1.3;\nint roundedX = (int) Math.round(x); // 1\n\ndouble y = 1.5;\nint roundedY = (int) Math.round(y); // 2\n\ndouble z = 1.7;\nint roundedZ = (int) Math.round(z); // 2\n\n// Maximum of two values\n// max\nint max = Math.max(4, 5);   // max is 5\nmax = Math.max(-4, -5);     // max is -4\n\ndouble max = Math.max(3.0, -2.1);   // max is 3.0\nmax = Math.max(-2.2, -10.2);        // max is -2.2\n\n// Minimum of two values\n// min\nint min = Math.min(10, 1);  // min is 1\nmin = Math.min(-10, -11);   // min is -11\n\ndouble min = Math.min(9.4, 11.1);   // min is 9.4\nmin = Math.min(2.2, -9.5);          // min is -9.5\n\n// Exponents (a raised to the power of b)\n// pow\ndouble base = 4;\ndouble exp = 2;\ndouble power = Math.pow(base, exp);  // power is 16.0 (4 * 4 = 16)\n\npower = Math.pow(1, 4);  // power is 1.0 (1 * 1 * 1 * 1 = 1)\n\n// Square root\n// sqrt\ndouble root = Math.sqrt(25);        // root is 5.0\nroot = Math.sqrt(16);               // root is 4.0\nroot = Math.sqrt(root);             // root is 2.0\n\n// Floor -- Greatest value lower than the parameter\n// floor\ndouble floor = Math.floor(8.323);   // floor is 8.0\nfloor = Math.floor(-8.323);         // floor is -9.0\n\n// Ceiling -- Lowest value greater than the parameter\n// ceil\ndouble ceiling = Math.ceil(8.323);  // ceiling is 9.0\nceiling = Math.ceil(-8.323);        // ceiling is -8.0\n\n// learn more at the full reference linked above!\n```\n### String Methods\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)\n```java\n// The String class allows for advanced\n// manipulations of Strings in Java.\n\n// Methods\nchar charAt(int index)\n    returns the character in the String\n    at the specified index.\n\nboolean equals(String other)\n    returns whether this string is equal\n    to a different String other\n\nboolean equalsIgnoreCase(String other)\n    returns whether this string is equal\n    to a different String other, ignoring\n    differences in upper and lower case\n\nint indexOf(char ch)\n    returns the index within this String\n    of the first occurance of the specified\n    character ch. If ch does not exist in\n    this String, -1 is returned\n\nint indexOf(String str)\n    returns the index within this String\n    of the first occurance of the specified\n    substring str. If str does not exist\n    inside this String, -1 is returned\n\nint length()\n    returns the length of this String\n\nString substring(int beginIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the end of the string\n\nString substring(int beginIndex, int endIndex)\n    returns the substring of this String\n    starting at the specified beginIndex\n    and ending at the specified endIndex.\n    The substring includes the character\n    at beginIndex, but does not include\n    the character at endIndex.\n\nboolean startsWith(String str)\n    returns true if this String starts\n    with the specified String str,\n    false otherwise\n\nboolean endsWith(String str)\n    returns true if this String ends\n    with the specified String str,\n    false otherwise\n\nString toLowerCase()\n    returns a new String containing\n    the same characters as this String\n    converted to lower case\n\nString toUpperCase()\n    returns a new String containing\n    the same characters as this String\n    converted to upper case\n\n// learn more at the full reference linked above!\n```\n### String Examples\n\n[Go To Full Java Reference](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)\n```java\n// The String class allows for advanced\n// manipulations of Strings in Java.\n\n// Examples\n\n// Creating Strings\nString hello = "hello";\nString empty = "";\nString sentece = "The quick brown fox jumps over the lazy dog.";\n\n// Accessing characters in a String\n// charAt\nString str = "Hello World!";\n\nchar first = str.charAt(0);  // first is \'H\'\nchar middle = str.charAt(6);  // middle is \'W\'\n\n// Checking for equality\n// equals and equalsIgnoreCase\nString str = "CodeHS";\nString lower = "codehs";\n\nboolean isEqual = str.equals("CodeHS"); // isEqual is true\nisEqual = str.equals(lower);         // isEqual is false\n\nboolean similar = str.equalsIgnoreCase(lower); // similar is true\n\n// Finding characters and substrings\n// indexOf\nString str = "Hello World!";\n\nint index = str.indexOf(\'H\'); // index is 0\nindex = str.indexOf(\'o\');     // index is 4\nindex = str.indexOf("World"); // index is 6\nindex = str.indexOf("Hello"); // index is 0\n\n// Getting the length of a String\n// length\nString str = "Hello";\nint length = str.length();  // length is 5\n\nstr = "A";\nlength = str.length();      // length is 1\n\nstr = "";\nlength = str.length();      // length is 0\n\n// Getting substrings of a String\n// substring\nString str = "CodeHS";\n\nString sub = str.substring(4); // sub is "HS"\nsub = str.substring(1);        // sub is "odeHS"\nsub = str.substring(1, 4);     // sub is "ode"\nsub = str.substring(0, 1);     // sub is "C"\n\n// Checking for beginnings and endings of a String\n// startsWith and endsWith\nString str = "CodeHS";\n\nboolean codeStart = str.startsWith("Code"); // codeStart is true\nboolean hsStart = str.startsWith("HS");     // hsStart false\n\nboolean codeEnd = str.endsWith("Code");     // codeEnd is false\nboolean hsEnd = str.endsWith("HS");         // hsEnd is true\n\n// Converting the case of characters in a String\n// toLowerCase and toUpperCase\nString str = "CodeHS";\nString hello = "Hello World!";\n\nString lower = str.toLowerCase();   // lower is "codehs"\nString upper = lower.toUpperCase(); // upper is "CODEHS"\n\nupper = hello.toUpperCase();        // upper is "HELLO WORLD!"\nlower = upper.toLowerCase();        // lower is "hello world!"\n\n// learn more at the full reference linked above!\n```\n### Extending Classes\n```java\n// using extends in Java means that one class inherits\n// from another.\n\n// for example, a Jet class could extend Plane\npublic class Jet extends Plane\n{\n    // Jet specific code here\n}\n\n// sometimes you will need to call a method from the\n// class you inherited from, known as the parent class.\n\nsuper.fly(); // this will class the parent class\' fly method\n```\n### Implementing Interfaces\n```java\n// implementing in Java is similar to using a blueprint.\n// an Interface gives methods classes must implement.\npublic interface Blueprint\n{\n    public String address = "10 Downing Street"\n    public void printAddress();\n}\n\npublic class Building implements Blueprint {\n    // we have to declare a method with the same\n    // signature as the interface.\n    public void printAddress()\n    {\n        // you can use interface variables like static variables\n        System.out.println(Blueprint.address);\n    }\n}\n```\n### Comparable Interface\n```java\n// A class can implement Comparable and then take advantage of other\n// utilities to help order objects of the class (useful for sorting)\n\n// Compares the current instance to the other object and return\n// a number indicating ordering. You should return 0 if they are\n// equal and a negative or positive number depending on ordering\npublic int compareTo(Object o)\n\n// For purposes of ordering circles\npublic int compareTo(Circle other)\n{\n    double diff = gerRadius() - other.getRadius();\n    return (int)Math.signum(diff);\n}\n```\n### List Interface\n```java\n// Defines methods classes can implement in order to\n// represent an ordered List\n// List is an interface that defines abstract method signatures\n\n// Some important methods of List interface:\n\n// Returns the number of elements in a list\nint size()\n\n// Adds the given element to the end of the list\nboolean add(E elem)\n\n// Adds the given element at the specified index, shifts the subsequent\n// elements up one index\nvoid add(int index, E elem)\n\n// Returns the element at the specified index\nE get(int index)\n\n// Replaces the element at the given index with the elem\n// provided. Returns the old element that was replaced\nE set(int index, E elem)\n\n// Classes can implement List\nArrayList<E> implements List<E>\n\nList<String> strList = new ArrayList<String>();\nList<MyClass> myList = new ArrayList<MyClass>();\n\n// How to use List\npublic void printOddIndices (List<integer> list)\n{\n    // Can use methods like list.add(4), list.size(), etc.\n}\n\n{% if item.prog_type == C.ProgramType.JAVA_GRAPHICS %}\n```\n### Graphics\n\n#### Circle\n```java\n// To make a circle\nCircle circle = new Circle(radius);\n\n// To set the location of the center of the circle\ncircle.setPosition(x, y);\n\n// Example, red circle with 50px radius with center at (100, 200)\nCircle circle = new Circle(50);\ncircle.setPosition(100, 200);\ncircle.setColor(Color.red);\n\n// Get the radius\ncircle.getRadius();                 // returns 50\ndouble curRadius = circle.getRadius(); // store in variable\n\n// Change the radius\ncircle.setRadius(100);\n\n// Get the position of the center of the circle\ndouble x = circle.getX();  // x is 100\ndouble y = circle.getY();  // y is 200\n\n// Change the location of the circle\ndouble x = getWidth() / 2;\ndouble y = getHeight() / 2;\ncircle.setPosition(x, y);   // circle center is in the center of the screen\n\n// Add to screen\nadd(circle);\n\n// Move the circle dx horizontally and dy vertically\ncircle.move(dx, dy);\n```\n#### Rectangle\n```java\n// To make a rectangle\nRectangle rect = new Rectangle(width, height);\n\n// To set location of the upper left corner of rectangle\nrect.setPosition(x, y);\n\n// Example, 200x50 blue rectangle with upper left corner at (100, 200)\nRectangle rect = new Rectangle(200, 50);\nrect.setPosition(100, 200);\nrect.setColor(Color.blue);\n\n// Get location of the upper left corner of the rectangle\ndouble x = rect.getX(); // x is 100\ndouble y = rect.getY(); // y is 200\n\n// Change location of the rectangle\ndouble x = getWidth() / 2;\ndouble y = getHeight() / 2;\nrect.setPosition(x, y)  // upper left corner is at center of screen\n\n// Add to screen\nadd(rect);\n\n// Move the rect dx horizontally and dy vertically\nrect.move(dx, dy);\n```\n#### Line\n```java\n// To draw a line from (x1, y1) to (x2, y2)\nLine line = new Line(x1, y1, x2, y2);\n\n// Set the line color to green\nline.setColor(Color.green);\n\n// Set the line width to 10 pixels\nline.setLineWidth(10);\n\n// Add to screen\nadd(line);\n\n// Change the starting point of the line to (x1, y1)\nline.setPosition(x1, y1);\n\n// Change the end point of the line to (x2, y2)\nline.setEndpoint(x2, y2);\n\n//Get the starting point of the line\ndouble x = line.getX();    // x has same value as x1\ndouble y = line.getY();    // y has same value as y1\n\n//Get the ending point of the line\ndouble endX = line.getEndX();    // x has same value as x2\ndouble endY = line.getEndY();    // y has same value as y2\n\n// Move the line dx horizontally and dy vertically\nline.move(dx, dy);\n```\n#### Text\n```java\n// To make a graphical text object\nText txt = new Text(label, font);\n\n// To set the position of the lower left corner of the text\ntxt.setPosition(x, y);\n\n// Example\nText txt = new Text("Hello, world!", "30pt Arial");\ntxt.setPosition(100, 200);\ntxt.setColor(Color.blue);\n\n// Change what the text says\ntxt.setText("Goodbye!");\n\n// Get the location of the lower left corner of text\ndouble x = txt.getX(); // x is 100\ndouble y = txt.getY(); // y is 200\n\n// Add to screen\nadd(txt);\n\n// Move the text dx horizontally and dy vertically\ntxt.move(dx, dy);\n```\n#### Color\n```java\n// There are many color constants. You can set an objects\n// color like\nobj.setColor(color);\n\n// Specifically,\nobj.setColor(Color.RED);\n\n// List of available colors:\nColor.RED\nColor.GREEN\nColor.BLUE\nColor.YELLOW\nColor.CYAN\nColor.ORANGE\nColor.WHITE\nColor.BLACK\nColor.GRAY\nColor.PURPLE\n\n// Another way to set the color of an object is to use a\n// string with the hexadecimal color value with setColor.\n// For example, to set a rect object to be pink:\nrect.setColor("#FF66CC");\n\n// Get a random color from the randomizer\nString color = Randomizer.nextColor();\n```\n');break;case g.l.PYTHON:case g.l.PYTHON2:n=d()('## Python Documentation\n\n## Basics\n\n*   [Comments](#comments)\n*   [String Formatting](#string-formatting)\n*   [Variables](#variables)\n*   [Math](#math)\n*   [Comparison Operators](#comparison-operators)\n*   [Random Numbers](#random-numbers)\n*   [String Methods](#string-methods)\n*   [Type Conversion](#type-conversion)\n*   [Exceptions](#exceptions)\n\n## Control Structures\n\n*   [Booleans](#booleans)\n*   [Operators](#operators)\n*   [If Statements](#if-statements)\n*   [For Loops](#for-loops)\n*   [While Loops](#while-loops)\n*   [Functions](#functions)\n*   [Classes](#classes)\n\n## Data Structures\n\n*   [Lists](#lists)\n*   [2D Lists](#2d-lists)\n*   [Dictionaries](#dictionaries)\n*   [Sets](#sets)\n*   [Tuples](#tuples)\n\n## I/O\n\n*   [Printing](#printing)\n*   [User Input](#user-input)\n*   [File Input](#file-input)\n\n## Python Documentation\n\n### Comments\n\n```python\n# Comments allow us to describe our program so that other\n# people can read it more easily.\n\n# Multiline comments are prefixed and suffixed with """ such as:\n\n"""\nThis program will ask the user for a number.\nThen it will square that number and print the final value.\n"""\nimport math\n\nnumber = int(input("Enter a number: "))\nprint "Squared: " + str(math.pow(number, 2))\n\n# Single line comments in Python are prefixed with a \'#\' such as:\n\n# This program adds 1 and 2\na = 1 + 2\nprint a\n```\n\n#### String Formatting\n\n```python\nprint "My name is %s and I am %d years old!" % (\'Zara\', 21)\n```\n\n### Variables\n\n```python\n# Create a variable named \\`name\\`\nname = "Zach"\nprint name\n\n# Create variables that are numbers\na = 3\nb = 4\nc = a + b\n\n# Get the type of the variable\ntype_string = "Hello world!"\ntype_int = 1110\n\nprint type(type_string)\nprint type(type_int)\n```\n\n### Math\n\n```python\n# Operators:\n+ Addition\n- Subtraction * Multiplication\n/ Division\n% Modulus (Remainder)\n() Parentheses (For order of operations)\n\nimport math\n\n# Examples\nz = x + y\nw = x * y\n\n# Division\na = 5.0 / 2 # Returns 2.5\nb = 5.0 // 2 # Returns 2.0\nc = 5/2 # Returns 2\n\n# Increment (add one)\nx += 1\n\n# Decrement (subtract one)\nx -= 1\n\n# Absolute value\nabsolute_value = abs(x)\n\nabs_val = abs(-5) # Returns 5\n\n# Square root\nsquare_root = math.sqrt(x)\n\n# Raising to a power\npower = math.pow(x, y) # Calculates x^y\n\n# Rounding\nrounded_num = round(0.5) # Returns 1\nrounded_float = round(2.675, 2) # Returns 2.68\n```\n\n### Comparison Operators\n\n```python\n# Comparison operators return booleans (true/false values)\nx == y # is x equal to y\nx != y # is x not equal to y\nx > y # is x greater than y\nx >= y # is x greater than or equal to y\nx < y # is x less than y\nx <= y # is x less than or equal to y\n\n# Comparison operators in if statements\nif x == y:\nprint "x and y are equal"\n\nif x > 5:\nprint "x is greater than 5."\n```\n\n### Random Numbers\n\n```python\n# Random integer between (and including) low and high\nimport random # you need to import it to be able to use randint!\nrandom_num = random.randint(low, high)\n\nrandom_num = random.randint(0,10)\n# Returns random number within and including 0 and 10.\n\n# Random element in a string\nrandom_element = random.choice(\'abcdefghij\')\n\'c\'\n```\n\n### String Methods\n\n```python\n# To make a string all uppercase\nmy_string = “hello”\nmy_string = my_string.upper() # returns “HELLO”\n\n# To make a string all lowercase\nmy_string = “HELLO”\nmy_string = my_string.lower() # returns “hello”\n\n# Returns True if a string is all uppercase letters and False\n# otherwise\nmy_string = “HELLO”\nprint my_string.isupper() # returns True\n\n# Returns True if a string is all lowercase letters and False\n# otherwise\nmy_string = “Hello”\nprint my_string.islower() # returns False\n\n# Returns a string in which each letter is the opposite case as\n# the original string\nmy_string = “PyThOn”\nmy_string = my_string.swapcase() # returns “pYtHoN”\n\n# Returns a copy of the string you call it on, without any\n# whitespace at the beginning or end\nmy_string = “ hi there “\nmy_string = my_string.strip() # returns “hi there”\n\n# Returns the lowest index in the string where substring is\n# found. Returns -1 if substring is not found\nmy_string = “eggplant”\nindex = my_string.find(“plant”) # returns 3\n\n# Concatenation\nmy_string = "Karel the"\nprint my_string + " dog"\n\n# Returns a character at a specific index\nmy_string = "hello!"\nprint my_string[0] # returns "h"\nprint my_string[5] # returns "!"\n\n# Returns all the characters after the specific index\nmy_string = "hello world!"\nprint my_string[1:] # returns "ello world!"\nprint my_string[6:] # returns "world!"\n\n# Returns all the characters before the specific index\nmy_string = "hello world!"\nprint my_string[:6] # returns "hello"\nprint my_string[:1] # returns "h"\n\n# Iterates through every character in the string\nmy_string = "Turtle"\n\nfor c in my_string:\nprint c\n\n# Splits the string into a list of words\nmy_string = "Karel is a dog"\nmy_list = my_string.split() # Returns [\'Karel\', \'is\', \'a\', \'dog\']\n\n# Using enumerate\nmy_string = "This is a dog"\nfor index, word in enumerate(my_string.split()):\nprint str(index) + ": " + word\n```\n\n### Type Conversion\n\n```python\n# Type conversion allows us to convert variables to different types\n# String to Integer conversion\nmy_string = "3"\nto_int = int(my_string)\n\n# Integer to String conversion\nmy_int = 11\nto_string = str(my_int)\n\n# Other conversions\nmy_list = [4, 5, 6]\nnew_tuple = tuple(my_list)\n\nmy_tuple = (3,2)\nnew_list = list(my_tuple)\n\nmy_list = [4, 5, 6]\nnew_set = set(my_list)\n\nmy_list = [4, 5]\nnew_dict = dict([my_list])\n```\n\n### Exceptions\n\n```python\n# Exception handling allows us to prevent our program from crashing\n# in the event of a fault.\n\n# Try/Except with input\ntry:\nmy_number = int(input("Enter an integer: "))\nprint "Your number: " + str(my_number)\nexcept ValueError:\nprint "That wasn\'t an integer!"\n\n# Try/Except for Type Errors\ntry:\nmy_number = \'2\' + 2\nexcept TypeError:\nprint "A type error has occured!"\n\n# Try/Except for Key Errors\ndictionary = {\'1\':\'k\', \'3\':\'A\', \'4\':\'R\', \'5\':\'E\', \'6\':\'L\'}\ntry:\ndictionary[\'2\']\nexcept KeyError:\nprint "Key error"\n\n# Try/Except for Attribute Errors\ntry:\ndictionary.no_method()\nexcept AttributeError:\nprint "Attribute Error!"\n\n# You can also have\ntry:\nmy_number = int(input("Enter an integer: "))\nprint "Your number: " + str(my_number)\nexcept:\nprint "There was an error."\n```\n\n### Booleans\n\n```python\n# A boolean is either True or False\nmy_boolean = True\n\nanotherBoolean = False\n```\n\n### Operators\n\n```python\n# And Operator\nand_expression = x and y\n\n# Or Operator\nor_expression = x or y\n\n# You can combine many booleans!\nboolean_expression = x and (y or z)\n```\n\n### If Statements\n\n```python\nif BOOLEAN_EXPRESSION:\nprint "This executes if BOOLEAN_EXPRESSION evaluates to True"\n\nif BOOLEAN_EXPRESSION:\nprint "This executes if BOOLEAN_EXPRESSION evaluates to True"\nelse:\nprint "This executes if BOOLEAN_EXPRESSION does not evaluate to True"\n\nif x < 0:\nprint "x is negative."\n\nif color == "red" or color == "blue" or color == "yellow":\nprint "Primary color."\nelse:\nprint "Not a primary color."\n\n# You can use elif if you have multiple\n# conditions, but only one should happen.\nif condition_1:\nprint "condition_1 evaluates to True"\nelif condition_2:\nprint "condition_2 evaluates to True"\nelif condition_3:\nprint "condition_3 evaluates to True"\nelse:\nprint "None of the above conditions evaluated to True. So I execute."\n\n# You can always write these using nested\n# if/else. For example:\nif condition_1:\nprint "condition_1 evaluates to True"\nelse:\nif condition_2:\nprint "condition_2 evaluates to True"\nelse:\nprint "condition_2 evaluates to False"\n```\n\n### For Loops\n\n```python\n# This for loop will print "hello" 5 times\nfor i in range(5):\nprint "hello"\n\n# This for loop will print out the numbers 0 through 9\nfor number in range(10):\nprint number\n\nmy_list = [1,5,10,15]\n\n# This code executes on each item in my_list\n# This loop will print 1, then 5, then 10, then 15\nfor item in my_list:\nprint item\n\n# Return a list of each number doubled\nnew_list = [] # Make a new empty list\nfor number in my_list:\nnumber *= 2\nnew_list.append(number)\nreturn new_list\n```\n\n### While Loops\n\n```python\nwhile BOOLEAN_EXPRESSION: # Repeat code betweeen brackets while # \'boolean expression\' is true\n\n# Countdown from from 15 to 10\ni = 15\nwhile i >= 10:\nprint i\ni -= 1\n```\n\n### Functions\n\n```python\n# Define a function that returns the sum of two numbers\ndef add(x, y):\nreturn x + y\n\n# Use the \\`add\\` function to print the sum\nprint add(1, 2)\n```\n\n### Classes\n\n```python\n# Declare a class\nclass MyClass: # The __init__ method is called whenever we instantiate our class\n    def __init__(self):\n        print "Class initiated"\n        self.my_num = 0\n\n# Instantiate your class\nmy_class = MyClass()\n\n# Access instance variables in your class\nprint my_class.my_num\n\nmy_class.my_num = 10\n\n# Adding arguments to your class\nclass Point:\n    def __init__(self, x = 0, y = 0):\n        self.x = x\n        self.y = y\n\n# Instantiate the class\np = Point(3, 4)\n```\n\n### Lists\n\n```python\n# Create an empty list\nmy_list = []\n\n# Create a list with any number of items\nmy_list = [item1, item2, item3]\nnumber_list = [1, 2, 4]\n\n# A list can have any type\nmy_list = [integer, string, boolean]\na_list = ["hello", 4, True]\n\n# Access a element in a list\nelement = my_list[i]\nfirst_element = a_list[0] # Returns "hello"\n\n# Set an element in a list\nmy_list[i] = item\na_list[0] = 9 # a_list = [9, 4, True]\n\n# Looping over a list\nfor item in my_list:\nprint "code that executes on each item"\nfor thing in a_list:\nprint thing # Prints all the items in a_list in order\n\n# Length of a list\nlist_length = len(my_list)\na_list_length = len(a_list) # Returns 3\n\n# Add to a list\nmy_list.append(item)\na_list.append("Puppy") # Now a_list = ["hello", 4, True, "Puppy"]\n\n# Remove and return last element from the list\nlast = my_list.pop()\nlast_item = a_list.pop() # Returns and removes "Puppy"\n\n# Remove and return an item from a list at index i\nmy_list.pop(i)\na_list.pop(0) # Returns and removes "hello"\n\n# Return the index in the list of the first item whose value is x.\n# It is an error if there is no such item\nmy_list.index(x)\na_list.index(4)\n# Since currently a_list = [4, True] this will return 0\n# Because 0 is the index of 4 in the list.\n\n# Returns a sorted list\nmy_list = [9, 7, 1, 2, 3]\nmy_list.sort() # Returns [1, 2, 3, 7, 9]\n\n# Returns a reversed list\nmy_list = [1, 2, 3, 4]\nmy_list.reverse() # Returns [4, 3, 2, 1]\n\n# Returns the number of instances\n# of a particular thing that were found.\nmy_list = [1, 4, 2, -4, 10, 0, 4, 2, 1, 4]\n\nprint my_list.count(4)\nprint my_list.count(0)\nprint my_list.count(1)\nprint my_list.count(12313)\n\n# Allows us to add a list to a list\nmy_list = [1, 2, 3]\nmy_list.extend([4, 5, 6]) # Returns [1, 2, 3, 4, 5, 6]\n\n# Allows us to remove a particular item from a list\nmy_list = ["apple", "banana", "orange", "grapefruit"]\n\n# Returns ["apple", "banana", "grapefruit"]\nmy_list.remove("orange")\n```\n\n### 2D Lists\n\n```python\n# 2D Lists allow us to create lists of lists.\n\n# Create an empty list\nmy_list = []\n\n# Add to the list\nmy_list.append([1, 2, 3])\nmy_list.append([4, 5, 6])\n\n# Access elements within the nested lists\nprint my_list[0] # Returns [1, 2, 3]\nprint my_list[0][1] # Returns 2\n\n# Take a slice of the outer list\nprint my_list[0:2] # Returns [[0, 0, 0], [1, 2, 4]]\n\n# Take a slice of the inner list\nprint my_list[0][0:2] # Returns [0, 0]\n```\n\n### Dictionaries\n\n```python\n# Dictionaries have a collection of key, value pairs\n\na_dictionary = {key1:value1, key2:value2}\n\nmy_farm = {pigs:2, cows:4} # A dictionary can keep a farm\'s animal count!\n\n# Create an empty dictionary\na_dictionary = {}\n\n# Insert a key, value pair\na_dictionary[key] = value\nmy_farm["horses"] = 1 # The farm now has one horse\n\n# Get a value for a key\n\nmy_dict[key] # Will return the key\nmy_farm["pigs"] # Will return 2, the value of "pigs"\n\n# Using the \'in\' keyword\nmy_dict = {"a": 1, "b": 2}\nprint "a" in my_dict # Returns True\nprint "z" in my_dict # Returns False\nprint 2 in my_dict # Returns False, because 2 is not a key\n\n# Iterating through a dictionary\nfor key in my_dict:\nprint "key: " + str(key)\nprint "value: " + str(my_dict[key])\n```\n\n### Sets\n\n```python\n# A set contains an unordered collection of unique and immutable objects\n# Make a new set named "new_set"\nnew_set = set([])\ngirl_scout_badges = set([])\n\n# Add to a set\nnew_set.add(item)\ngirl_scout_badges.add("Squirrel Whisperer")\n\n# Does a set contain a value\nitem in my_set # Returns a boolean\n"Squirrel Whisperer" in girl_scout_badges # Returns True\n\n# Number of elements in the set\nlen(my_set)\nlen(girl_scout_badges) #Returns 1 since there is only one item in the set\n```\n\n### Tuples\n\n```python\n# Tuples are immutable sequences of items.\n# Make a new tuple named "my_tuple"\nmy_tuple = (1, 2, 3, 4, 5)\n\n# Print the item at a specific index\nprint my_tuple[0]\nprint my_tuple[4]\n\n# Slice the tuple at the specific index\nprint my_tuple[:3]\n\n# Get the length of the tuple\nprint len(my_tuple)\n\n# Tuple with elements of different types\nmy_tuple = (0, 1, "Karel", (1, 2))\n\n# Tuple of tuples\nmy_tuple((0, 1), (2, 3))\n\n# Accessing elements within nested tuples\nprint my_tuple[0][0]\nprint my_tuple[1][0]\n\n# Tuple with single element\nmy_tuple = (3,)\n\n# Concatentating tuples\nx = (1, 2)\ny = (5, 6)\nmy_tuple = x + (3,) + y\n```\n\n### Printing\n\n```python\nprint "Hello world"\nprint 2 + 2\nprint 10\n```\n\n### User Input\n\n```python\n# You should replace the word prompt with\n# the question you\'d like to ask. For example:\nperson = input(\'Enter your name: \')\nprint(\'Hello\', person)\n```\n\n### File Input\n\n```python\n# Extracting Data from a File:\n\n# Example File:\n\n# test.txt\n# ------------------\n\n#\n\n# Hello World\n# This is File Input\n\n#\n\n# ------------------\n\n# Opening the file, Create a File object and store it in a Variable:\nfile = open(\'test.txt\')\n\n# Getting all text:\nfile.read() # Returns: # Hello World # This is File Input\n\n# Getting a Line of Text:\nfile.readline() # Returns: # Hello World\n\n# Getting lines in a file:\nfor line in file:\nprint line + \'!\' # Returns: # Hello World\\\\n! # This is File Input\\\\n!\n\n# Note \'\\\\n\', signifying the end of a line of text\nfor line in file:\nprint line + \'!\' # Returns: # Hello World # ! # This is File Input # !\n\n# To remove this extra newline, we can use:\nfor line in file:\nprint line.strip() + \'!\' # Returns: # Hello World! # This is File input!\n\n# Closing a File\nfile.close()\n```\n');break;case g.l.PYTHON3:break;case g.l.TURTLE:n=d()('## Turtle Graphics\n\n*   [Commands](#turtle-commands)\n*   [Loops](#loops)\n*   [Functions](#functions)\n*   [Variables](#variables)\n*   [User Input](#user-input)\n*   [Comments](#comments)\n\n## Turtle Commands\n\nCommands are how we tell Tracy the Turtle to do things.\n\nTracy knows several built-in commands.\n\n### Movement\n\n```python\n# The forward command makes Tracy move forward a given distance\nforward(10)\nforward(50)\nforward(200)\n\n# The backward command makes Tracy move backward a given distance\nbackward(10)\nbackward(50)\nbackward(200)\n\n# Negative values can also be used to move Tracy forward or backward\nbackward(-200)\nforward(-200)\n\n### Drawing Circles\n\n# The circle command makes Tracy draw a circle above her with specified radius\ncircle(10)\ncircle(100)\n\n# Another parameter can be used to draw only certain portions of a circle\n# This command will draw a semi-circle\ncircle(10, 180)\n\n# This command will draw a quarter-circle\ncircle(10, 90)\n\n# Another parameter can be used to control the number of points in the shape\n# This command will draw a triangle\ncircle(10, 360, 3)\n\n# This command will draw a square\ncircle(10, 360, 4)\n```\n\n### Pen\n\n```python\n# Lift the pen up\n# Tracy will not leave a trail when she moves\npenup()\n\n# Put the pen down\n# Tracy will leave a trail when she moves\npendown()\n\n# Change the size of the pen\n\n# Normal, line width of 1\npensize(1)\n\n# Bigger, line width of 10\npensize(10)\n```\n\n### Rotation\n\n```python\n# Tracy will turn 90 degrees to the left\nleft(90)\n\n# Tracy will turn left 180 degrees and\n# face the opposite direction\nleft(180)\n\n# Tracy will turn left a full 360 degrees\n# and do a complete spin\nleft(360)\n\n# The right command does the same thing,\n# but Tracy turns right instead of left\nright(90)\nright(180)\nright(360)\n\n# Negative values can also be used to turn Tracy right or left\nright(-90)\nleft(-90)\n\n# We can use the `setheading` command (or `seth`) to set Tracy to a specific direction\n\n# Set Tracy to point right\nsetheading(0)\n\n# Set Tracy to point up\nsetheading(90)\n\n# Set Tracy to point down. Using `seth` is a shortcut for `setheading`\nseth(270)\n```\n\n### Position\n\nTracy is positioned in an (x, y) coordinate plane like so:\n\n![](https://s3-us-west-2.amazonaws.com/codehsuploads/1f0526a11842c2623e9e33366019fcc3)\n\nEach point in Tracy\'s world can be located by an (x, y) coordinate. For example:\n\n*   The center of the world is (0, 0)\n*   The top middle of the world is (0, 200)\n*   The bottom left of the world is (-200, -200)\n*   And so on...\n\nWe can use the `setposition` command to send Tracy to a specific location\n\n```python\n# Send Tracy to the center of the world\n\nsetposition(0, 0)\n\n# Send Tracy to the far right middle of the world\n\nsetposition(100, 0)\n\n# Send Tracy to the top right corner of the world\n\nsetposition(200, 200)\n\n# Set Tracy\'s x position to be 100\n\n# The y position stays the same\n\nsetx(100)\n\n# Set Tracy\'s y position to be 100\n\n# The x position stays the same\n\nsety(100)\n```\n\n### Speed\n\nWe can set Tracy\'s speed using the `speed` command\n\nSpeed options go from 0 to 10\n\n```python\n# Slowest\n\nspeed(1)\n\n# Normal\n\nspeed(6)\n\n# Fast\n\nspeed(10)\n\n# Fastest (no animation at all)\n\nspeed(0)\n```\n\n### Color\n\n```python\n# Draws a red line\n\ncolor("red")\nforward(50)\n\n# Draws a blue line\n\ncolor("blue")\nforward(50)\n\n# Some color options:\n\ncolor("black")\ncolor("blue")\ncolor("brown")\ncolor("cyan")\ncolor("gold")\ncolor("gray")\ncolor("green")\ncolor("indigo")\ncolor("orange")\ncolor("pink")\ncolor("purple")\ncolor("red")\ncolor("violet")\ncolor("white")\ncolor("yellow")\n```\n\n### Filling\n\n```python\n# To draw a filled shape, start with this call\n\nbegin_fill()\n\n# Draw your shape\n\nfor i in range(3):\n    forward(50)\n    left(120)\n\n# Stop filling once you have drawn the shape\n\nend_fill()\n```\n\n### Clear Screen\n\n```python\n# To clear the screen of any markings, use clear command\n\nclear()\n\n# This can be used at the end of a code\n\n# This will clear the screen after the square is drawn\n\nfor i in range(4):\n    forward(50)\n    left(90)\n    clear()\n\n# This can be used throughout code\n\n# This will clear the screen before drawing the square\n\ncircle(50)\nclear()\nfor i in range(4):\n    forward(50)\n    left(90)\n```\n\n## Loops\n\nLoops help us repeat commands which makes our code much shorter.\n\nMake sure everything inside the loop is **indented** one level!\n\n### For Loops\n\nUse for-loops when you want to repeat something a fixed number of times.\n\n```python\n# Instead of repeating code over and over\n\nforward(10)\nleft(90)\nforward(10)\nleft(90)\nforward(10)\nleft(90)\nforward(10)\nleft(90)\n\n# Use a for loop to repeat the code!\n\nfor i in range(4):\n    forward(10)\n    left(90)\n\n# You can use the i variable inside the loop\n\n# i starts at 0, and goes up to COUNT-1\n\n# This will make Tracy move forward 0, then 1, then 2\n\nfor i in range(3):\n    forward(i)\n\n# You can change the value of i inside a for loop by using mathematical expressions\n\nfor i in range(3):\n    forward(i*10)\n\n# You can also control the value of i by using extended parameters\n\nfor i in range(STARTING_VALUE, ENDING_VALUE, INCREMENT):\n\n# This will move Tracy forward 25, 50, and 75 pixels\n\nfor i in range(25, 76, 25):\n    forward(i)\n```\n\n### While Loops\n\nUse while loops when you want to repeat something an unknown number of time or until a condition becomes false.\n\nIf there is no point where the condition becomes false, you will create an infinite loop which should always be avoided!\n\n```python\n# Keep drawing circles until the count variable is greater than 5\n\n# If count variable is not updated, infinite loop will occur\n\ncount = 0\nwhile count <= 5:\n    circle(50)\n    count = count + 1\n\n# You can also use user input to control a while loop\n\n# This code will continue running while the user answers ‘Yes’\n\ncontinue = input("Continue code?: ")\nwhile continue == "Yes":\n    forward(10)\n    left(90)\ncontinue = input("Continue code?: ")\n```\n\n## Functions\n\nWriting a function is like teaching Tracy the Turtle a new word.\n\nNaming Functions: You can name your functions whatever you want, but you can\'t have spaces in the function name. Instead of spaces, use underscores **(\\_)** like_this_for_example\n\nMake sure that all the code inside your function is **indented** one level!\n\n### Defining a Function\n\nWe define a function to teach Tracy the instructions for the new word.\n\n```python\ndef name_of_your_function(): # Code that will run when you make a call to # this function.\n\n# EXAMPLES\n\n# Teach Tracy to draw an edge\n\ndef draw_edge():\n    forward(50)\n    left(90)\n\n# Teach Tracy to draw a blue edge\n\ndef draw_blue_edge():\n    color("blue")\n    forward(50)\n    left(90)\n\n# Teach Tracy to draw a square\n\ndef draw_square():\n    for i in range(4):\n        draw_edge()\n```\n\n### Using Parameters in Functions\n\nWe use parameters to alter certain commands in our function.\n\n```python\n# Use a parameter to control the radius of the circle being drawn\n\ndef draw_circle(radius):\n    circle(radius)\n\n# Multiple parameters can be used in one function\n\n# Parameters control the length of square sides and color\n\ndef draw_square(length, color_choice):\n    color(color_choice)\n    for i in range(4):\n        forward(length)\n        left(90)\n```\n\n### Calling a Function\n\nWe call a function to get Tracy to actually carry out the new command.\n\n```python\n# Call the draw_edge() function once\n\n# Tracy will draw one edge\n\ndraw_edge()\n\n# Call the draw_edge() function 3 times\n\n# Tracy will draw 3 edges\n\ndraw_edge()\ndraw_edge()\ndraw_edge()\n\n# Call the draw_square() function with parameters\n\n# Tracy will draw 3 squares with different sizes and colors\n\ndraw_square(50, "red")\ndraw_square(100, "blue")\ndraw_square(75, "orange")\n```\n\n## Variables\n\nWe use variables to store values that can be used to control commands in our code. The variable values can also be altered throughout the code.\n\n```python\n# Make a variable to keep track of something\n\ncount = 0\n\n# Update the value of the variable using mathematical expressions\n\n# This will add one to the value of the count variable\n\ncount = count + 1\n\n# Variable values can also be altered inside control structures\n\n# The value of the variable count will increase by 1 on every loop iteration\n\nfor i in range(4):\n    forward(10)\n    count = count + 1\n```\n\n## User Input\n\nWe can use input from the user to control our code.\n\n```python\n# Ask the user for input and save it to a variable to be used in code\n# This will only work if the input is being used as a string\n\ncircle_color = input("What is the color of the circle? ")\n\n# If input needs to be used as a number, include the term ‘int’\n\nradius = int(input("What is the radius of the circle? "))\n\n# This input can then be used to control different parts of the code\n\ncolor(circle_color)\ncircle(radius)\n```\n\n## If/Else Statements\n\nWe can tell Tracy how to make decisions using if/else statements.\n\nMake sure that all the code inside your if/else statement is indented one level!\n\n### If Statements\n\nUse an if statement to tell Tracy to do something only when a condition is true. If the condition is false, Tracy will skip the commands indented underneath.\n\n```python\n# Tracy will only draw a circle if the count variable is less than 5\n\nif count < 5:\n    circle(50)\n```\n\n### If/Else Statements\n\nUse an if/else statement to force Tracy to make a decision between multiple conditions. If the first condition is false, Tracy will skip to the next condition until she finds one that is true. If no conditions are true, the commands inside the ‘else’ block will be performed.\n\n```python\n# Tracy will draw a circle if count variable is less than 5\n\nif count < 5:\n    circle(50)\n# Tracy will draw a square if count variable is greater than 5\nelif count > 5:\n    circle(50,360,4)\n# In any other case, Tracy will draw a line\n# The only other case that exists outside the boundaries stated is if count = 5\n# We do not include a condition for else statements\nelse:\n    forward(50)\n```\n\n## Comments\n\nWe use comments to leave notes about the code to the reader. Comments are not actually run by Python, they are just there to help us read the code.\n\nWe can make multiline comments with `"""` and single line comments with `#`\n\n```python\n"""\nA multi-line comment describes your code\nto someone who is reading it.\n"""\n\n# Use single line comments to clarify code.\n```\n');break;case g.l.JS_CONSOLE:n=d()("## JavaScript Documentation\n\n### Basics\n\n*   [Printing](#printing)\n*   [Variables](#variables)\n*   [Functions](#functions)\n*   [User Input](#user-input)\n*   [Comparison Operators](#comparison-operators)\n*   [Math](#math)\n*   [Randomizer](#randomizer)\n\n### Control Structures\n\n*   [Booleans](#booleans)\n*   [If Statements](#if-statements)\n*   [For Loops](#for-loops)\n*   [While Loops](#while-loops)\n\n### Data Structures\n\n*   [Arrays](#arrays)\n*   [Maps/Objects](#maps-objects)\n*   [Sets](#sets)\n*   [Grids](#grids)\n\n### Printing\n\n```js\nprintln(str);\nprint(str);\n\n// Example:\nprintln('Hello world.');\n\n// Printing without a new line:\nprint('Hello world. ');\nprint('How are you?');\n```\n\n### Variables\n\n```js\n// Declare a variable\nvar myVarName;\n\n// Initialize a variable\nvar myVarName = 5;\n\n// Assign to an existing variable\nmyVarName = 10;\n\n// Print a variable\nprintln(myVarName);\nprintln('The value is: ' + myValue);\n```\n\n### Functions\n\n```js\n// Functions can take in values, called parameters.\n// The function below takes in a parameter called\n// 'input' and prints it.\nfunction printText(input) {\n    println(input);\n}\n\n// Functions can also return a value.\n// The function below takes in a value,\n// adds two to it, and returns it.\nfunction addTwo(number) {\n    return number + 2;\n}\n```\n\n### User Input\n\n```js\n// Read a string\nvar str = readLine(prompt);\n\n// Read an integer\nvar num = readInt(prompt);\n\n// Read a float\nvar cost = readFloat(prompt);\n\n// Read a boolean\nvar bool = readBoolean(prompt);\n\n// You should replace the word prompt with\n// the question you'd like to ask. For example:\nvar name = readLine('What is your name? ');\nvar age = readInt('What is your age? ');\nvar finishedWork = readBoolean('Is your work done? ');\n```\n\n### Comparison Operators\n\n```js\n// Comparison operators return booleans (true/false values)\n\nx == y; // is x equal to y\nx != y; // is x not equal to y\nx > y; // is x greater than y\nx >= y; // is x greater than or equal to y\nx < y; // is x less than y\nx <= y; // is x less than or equal to y\n\n// Comparison operators in if statements\nif (x == y) {\n    println('x and y are equal');\n}\n\nif (x > 5) {\n    println('x is greater than 5.');\n}\n```\n\n### Math\n\n```js\n// Operators:\n+\tAddition\n-\tSubtraction\n*\tMultiplication\n/\tDivision\n%\tModulus (Remainder)\n()\tParentheses (For order of operations)\n\n// Examples\nvar z = x + y;\nvar w = x * y;\n\n// Increment (add one)\nx++\n\n// Decrement (subtract one)\nx--\n\n// Shortcuts\nx = x + y;\t\tx += y;\nx = x - y;\t\tx -= y;\nx = x * y;\t\tx *= y;\nx = x / y;\t\tx /= y;\n\n// Absolute value\nvar abs = Math.abs(x);\n\n// Square root\nvar sqrt = Math.sqrt(x);\n\n// Rounding\n// Math.round() can be used to round numbers\nvar pi = 3.14;\nvar roundedPi = Math.round(pi);\nprintln(roundedPi);\t\t\t\t// prints out: 3\n\nvar goldenRatio = 1.618;\nvar roundedGoldenRatio = Math.round(goldenRatio);\nprintln(roundedGoldenRatio);\t\t// prints out: 2\n\n// Floor Division\n// Math.floor() can be used to perform floor\n// division. With floor division, only the\n// integer portion of the quotient is returned.\n\n// For example, 5/2 is 2.5, but with floor division,\n// the result is 2 and the .5 is discarded.\nvar result = Math.floor(5/2);\nprintln(result);\t\t\t\t\t// prints out: 2\n```\n\n### Randomizer\n\n```js\n// Random integer between low and high\nRandomizer.nextInt(low, high);\nRandomizer.nextBoolean();\nRandomizer.nextFloat(low, high);\nRandomizer.nextColor();\n\nvar roll = Randomizer.nextInt(1, 6);\n\nvar color = Randomizer.nextColor();\n```\n\n### Booleans\n\n```js\n// A boolean is either true or false\nvar myBoolean = true;\n\nvar anotherBoolean = false;\n\nvar result = readBoolean('Question? ');\n\n// Not Operator\nvar x = !y; // x gets the opposite of y\n\n// And Operator\nvar andExp = x && y;\n\n// Or Operator\nvar orExp = x || y;\n\n// You can combine many booleans!\nvar boolExp = x && (y || z);\n```\n\n### If Statements\n\n```js\nif (BOOLEAN_EXPRESSION) {\n    // code to execute if true\n}\n\nif (BOOLEAN_EXPRESSION) {\n    // code if true\n} else {\n    // code if false\n}\n\nif (x < 0) {\n    println('x is negative.');\n}\n\nif (color == 'red' || color == 'blue' || color == 'yellow') {\n    println('Primary color.');\n} else {\n    println('Not a primary color.');\n}\n\n// You can use else if if you have multiple\n// conditions, but only one should happen.\nif (condition_1) {\n} else if (condition_2) {\n} else if (condition_3) {\n} else {\n}\n\n// You can always write these using nested\n// if/else. For example:\nif (condition_1) {\n    // code here runs if condition 1 is true\n} else {\n    if (condition_2) {\n        // if condition 2 is true\n    } else {\n        // and here if condition 2 is false\n    }\n}\n```\n\n### For Loops\n\n```js\nvar COUNT = 5;\n\nfor (var i = 0; i < COUNT; i++) {\n    /* Repeat code betweeen the brackets 5 times,\n                                                            \t * as the COUNT variable is 5. */\n}\n\n// Print numbers 0-9\nfor (var i = 0; i < 10; i++) {\n    println(i);\n}\n```\n\n### While Loops\n\n```js\nwhile(boolean expression){\n\t/* Repeat code betweeen brackets while\n\t * 'boolean expression' is true */\n}\n\n// Countdown from from 15 to 10\nvar i = 15;\nwhile(i > 10){\n\tprintln(i);\n\ti--;\n}\n\n// This is a loop and a half format\nwhile(true){\n\t// code\n\tif(condition){\n\t\tbreak;\n\t}\n}\n```\n\n### Arrays\n\n```js\n// Create an empty array\nvar arr = [];\n\n// Create an array with values\nvar arr = [1, 2, 4];\n\n// An array can have any type\nvar arr = [4, 'hello', x];\n\n// Access an element in an array\nvar elem = arr[i];\n\nvar firstElem = arr[0];\n\n// Set an element in an array\narr[4] = 9;\n\n// Looping over an array\nfor (var i = 0; i < arr.length; i++) {\n    var cur = arr[i];\n    // process cur\n}\n\n// length of an array\nvar length = arr.length;\n\n// Add to an array\narr.push(elem);\n\n// Remove last element from array\nvar last = arr.pop();\n\n// Finding an element in a list\nvar index = arr.indexOf(5);\n\n// Remove an element from a list at index i\narr.remove(i);\n```\n\n### Maps/Objects\n\n```js\n// Object literal\nvar obj = {\n    name: 'Jeremy',\n    color: 'blue',\n};\n\n// Objects/Maps have a collection of key, value pairs\n\n// Set a value\nobj['Jeremy'] = '123-4567';\n\n// Get a value for a key\nvar phone = obj['Jeremy'];\n\n// Loop over an object\nfor (var key in obj) {\n    var val = obj[key];\n    // process key and val\n}\n```\n\n### Sets\n\n```js\n// Make a new set named \"newSet\"\nvar newSet = new Set();\n\n// Add to a set\nnewSet.add(5);\n\n// Does a set contain a value\nnewSet.contains(5); // returns a boolean\n\n// Number of elements in the set\nnewSet.size(); // returns an integer\n\n// Make a new set named \"setA\"\nvar setA = new Set();\n// Add 2 numbers to the set\nsetA.add(1);\nsetA.add(2);\n// Make a new set named \"setB\"\nvar setB = new Set();\n// Add 2 numbers to the set\nsetB.add(2);\nsetB.add(3);\n\n// Assign setA to a new variable named \"mutualSet\"\nvar mutualSet = setA;\n// Call the intersect function on \"mutualSet\" and pass in \"setB\"\nmutualSet.intersect(setB);\nreturn mutualSet; // returns a set with the shared values from \"setA\" and \"setB\"\n```\n\n### Grids\n\n```js\n// Create a grid named \"newGrid\"\nvar newGrid = new Grid(rows, cols);\n\n// Get a value in a grid\nvar elem = newGrid.get(row, col);\n\n// Set a value in a grid\nnewGrid.set(row, col, val);\n\n// Getting dimensions\nvar rows = newGrid.numRows();\nvar cols = newGrid.numCols();\n\n// Is a row, col pair inbounds\nnewGrid.inBounds(row, col);\n\n// Set all values in grid to initial value\nnewGrid.init(0); // sets all grid values to 0\n\n// Initialze a grid from an array\nnewGrid.initFromArray([\n    [6, 3, 2], // 0th row\n    [2, 5, 1], // 1st row\n    [4, 3, 9], // 2nd row\n    [1, 5, 1], // 3rd row\n]);\n```\n");break;case g.l.SQL:n=d()('## SQL Documentation\n\n### Selecting from a table.\n\n```sql\nSELECT * FROM Table;\n```\n\n### Selecting only certain fields from a table.\n\n```sql\nSELECT field1, field2 FROM Table;\n```\n\n### WHERE clauses.\n\n```sql\n-- Basic WHERE clause\nSELECT * FROM Table\nWHERE condition;\n\n-- Compound WHERE clauses\nSELECT * FROM Table\nWHERE condition1\nAND condition2;\n```\n\n### Condition operators\n\n```sql\n=\t\t\t\t\tequal\n<\t\t\t\t\tless than\n>\t\t\t\t\tgreater than\n<>\t\t\t\t\tnot equal\nIN (a, b, c)\t\tValue is in a list\nBETWEEN x AND y\t\tValue is between x and y\nLIKE "%"\t\t\tString matches a pattern\n```\n\n### String patterns.\n\n```sql\n"A%" (words starting with "A")\n"%a" (words ending with "a")\n"%a%" (words with "a" in it)\n```\n\n### Ordering / Sorting queries.\n\n```sql\n// Sort by a field name\nORDER BY field_name;\n\n-- Sort by a field name in reverse\nORDER BY field_name DESC;\n\n-- Sort by a field and then sort by a 2nd field when the 1st field is equal\nORDER BY field_1, field_2;\n```\n\n### Renaming fields in results\n\n```sql\nSELECT field_name AS "Field Name"\n\nSELECT first_name AS "First Name"\n```\n\n### Joining Tables.\n\n```sql\n-- Select all fields in both tables combined.\nSELECT *\nFROM TableA JOIN TableB;\n\n-- Select only the rows in the joined table where the ids match\nSELECT *\nFROM TableA JOIN TableB\nWHERE TableA.id = TableB.id;\n\n-- Select only the relevant columns from each table\n-- Where their ids match\nSELECT TableA.value, TableB.value\nFROM TableA JOIN TableB\nWHERE TableA.id = TableB.id;\n```\n\n### The COUNT Function\n\n```sql\n-- Return the number of rows in Table\nSELECT COUNT(*) FROM Table;\n\n-- Return the number of houses and name\n-- the column "Num Houses"\nSELECT COUNT(*) As "Num Houses" FROM House;\n```\n\n### Grouping\n\n```sql\n-- Syntax for grouping and counting\nSELECT field_name, COUNT(*)\nFROM Table\nGROUP BY field_name;\n```\n\n### Filtering with HAVING\n\n```sql\n-- You use HAVING instead of WHERE if you are\n-- filtering after a GROUP BY\nSELECT field_name, COUNT(*)\nFROM Table\nGROUP BY field_name\nHAVING condition;\n```\n\n### Limiting results\n\n```sql\n-- Use LIMIT after any query to limit the number of results\nSELECT * FROM Table LIMIT 10;\n\n-- Ex) Show the 5 highest values only\nSELECT field_name, COUNT(*)\nFROM Table\nGROUP BY field_name\nORDER BY COUNT(*) DESC\nLIMIT 5;\n```\n');break;case g.l.P5:n=d()("View the [Full Reference.](https://p5js.org/reference/)\n\n## Processing Documentation\n\n### Shapes\n\n#### Rectangles\n\n```js\n// Draws a rectangle with the top left at (x, y)\nrect(x, y, width, height);\n```\n\n#### Ellipses and Circles\n\n```js\n// Draws an ellipse\n// `x` is the coordinate of the left side\n// `y` is the coordinate of the top side\nellipse(x, y, width, height);\n\n// To draw a circle, just make width and height\n// the same value, which is the diameter\nellipse(x, y, diameter, diameter);\n```\n\n#### Lines\n\n```js\n// Draws a line from (x1, y1) to (x2, y2)\nline(x1, y1, x2, y2);\n```\n\n#### Text\n\n```js\n// Set the font for the next text you draw\ntextFont(fontName);\n\n// Set the font size for the next text you draw\ntextSize(size);\n\n// Draws \"Hello\" on the screen at (x, y)\ntext('Hello', x, y);\n```\n\n#### Points\n\n```js\n// Draws a point at the given coordinates\npoint(x, y);\n```\n\n#### Triangles\n\n```js\n// Draws a triangle\n// You must pass 3 coordinates for each point\ntriangle(x1, y1, x2, y2, x3, y3);\n```\n\n### Color\n\n#### Fill Colors\n\n```js\n// Set the whole background color with the given\n// red, green, blue values (r, g, b)\nbackground(r, g, b);\n\n// Set the fill color for the next shape you draw\n// with the given red, green, blue values (r, g, b)\nfill(r, g, b);\n\n// Remove the fill color for the next shape you draw\nnoFill(r, g, b);\n```\n\n#### Outline Colors\n\n```js\n// Set the outline color for the next shape you draw\n// with the given red, green, blue values (r, g, b)\nstroke(r, g, b);\n\n// Remove the outline for the next shape you draw\nnoStroke(r, g, b);\n```\n\n### Animation\n\n```js\n// Defining the `draw` function like this will\n// run the code inside the function repeatedly\ndraw = function() {\n    // Your code here will repeat\n};\n```\n\n### Interaction\n\n#### Mouse\n\n```js\n// current x-coordinate of the mouse\nmouseX;\n\n// current y-coordinate of the mouse\nmouseY;\n\n// Draw a 10x10 square where the mouse is\nrect(mouseX, mouseY, 10, 10);\n\n// Handle mouse events\n// Define one of these functions\n\nmouseClicked = function() {\n    // Code here runs when the mouse is clicked\n    // (This is a full click when you release the button)\n};\n\nmousePressed = function() {\n    // Code here runs when the mouse is pressed\n    // This is before your hand lifts up off the button\n};\n\nmouseReleased = function() {\n    // Code here runs when the mouse is released\n    // This is when your hand lifts up off the button\n};\n\nmouseMoved = function() {\n    // Code here runs when the mouse is moved\n};\n\nmouseDragged = function() {\n    // Code here runs when the mouse is dragged\n};\n```\n\n#### Keyboard\n\n```js\n// Value for which key is being pressed right now\nkey;\nkey.toString(); // Returns a string with the value of the key\nkey.code; // Returns the numeric key code\n\n// Boolean for whether any key is currently being pressed\nkeyIsPressed;\n\n// Example\nif (keyIsPressed) {\n    // Do something because a key is being pressed\n}\n\n// Handle keyboard events\n// Define one of these functions\n\nkeyPressed = function() {\n    // Code here runs when the key is pressed\n    // (This is a when you first touch the key)\n};\n\nkeyReleased = function() {\n    // Code here runs when the key is released\n    // (This is when you release your finger from the key)\n};\n```\n\n### Numbers\n\n#### Canvas\n\n```js\n// Get the width of the screen\nwidth;\n\n// Get the height of the screen\nheight;\n\n// Draw an ellipse that's the half the width\n// and half the height of the screen\nellipse(0, 0, width / 2, height / 2);\n```\n\n#### Random\n\n```js\n// Get a random number between 0 and `num`\nrandom(num);\n\n// Get a random x coordinate on the screen\nvar x = random(width);\n\n// Get a random y coordinate on the screen\nvar y = random(height);\n\n// Draw a circle with diameter 10 at that random spot\nellipse(x, y, 10, 10);\n\n// Set the background to a random color\n// Each r/g/b value can go up to 255\nbackground(random(255), random(255), random(255));\n```\n");break;case g.l.JS_GRAPHICS:n=d()("## JavaScript Documentation\n\n### Basics\n\n*   [Printing](#printing)\n*   [Variables](#variables)\n*   [Functions](#functions)\n*   [User Input](#user-input)\n*   [Comparison Operators](#comparison-operators)\n*   [Math](#math)\n*   [Randomizer](#randomizer)\n\n### Graphics\n\n*   [Canvas](#canvas)\n*   [Circles](#circles)\n*   [Rectangles](#rectangles)\n*   [Arcs](#arcs)\n*   [Lines](#lines)\n*   [Ovals](#ovals)\n*   [Text](#text)\n*   [Images](#images)\n*   [Images Hosted on CodeHS](#images-hosted-on-codehs)\n*   [Color](#color)\n*   [Rotation](#rotation)\n\n### Control Structures\n\n*   [Booleans](#booleans)\n*   [If Statements](#if-statements)\n*   [For Loops](#for-loops)\n*   [While Loops](#while-loops)\n\n### Animation\n\n*   [Timers](#timers)\n*   [Mouse Events](#mouse-events)\n*   [Keyboard Events](#keyboard-events)\n*   [Audio Files](#audio-files)\n\n### Data Structures\n\n*   [Arrays](#arrays)\n*   [Maps/Objects](#maps-objects)\n*   [Sets](#sets)\n*   [Grids](#grids)\n\n### Printing\n\n```js\nprintln(str);\nprint(str);\n\n// Example:\nprintln('Hello world.');\n\n// Printing without a new line:\nprint('Hello world. ');\nprint('How are you?');\n```\n\n### Variables\n\n```js\n// Declare a variable\nvar myVarName;\n\n// Initialize a variable\nvar myVarName = 5;\n\n// Assign to an existing variable\nmyVarName = 10;\n\n// Print a variable\nprintln(myVarName);\nprintln('The value is: ' + myValue);\n```\n\n### Functions\n\n```js\n// Functions can take in values, called parameters.\n// The function below takes in a parameter called\n// 'input' and prints it.\nfunction printText(input) {\n    println(input);\n}\n\n// Functions can also return a value.\n// The function below takes in a value,\n// adds two to it, and returns it.\nfunction addTwo(number) {\n    return number + 2;\n}\n```\n\n### User Input\n\n```js\n// Read a string\nvar str = readLine(prompt);\n\n// Read an integer\nvar num = readInt(prompt);\n\n// Read a float\nvar cost = readFloat(prompt);\n\n// Read a boolean\nvar bool = readBoolean(prompt);\n\n// You should replace the word prompt with\n// the question you'd like to ask. For example:\nvar name = readLine('What is your name? ');\nvar age = readInt('What is your age? ');\nvar finishedWork = readBoolean('Is your work done? ');\n```\n\n### Comparison Operators\n\n```js\n// Comparison operators return booleans (true/false values)\n\nx == y; // is x equal to y\nx != y; // is x not equal to y\nx > y; // is x greater than y\nx >= y; // is x greater than or equal to y\nx < y; // is x less than y\nx <= y; // is x less than or equal to y\n\n// Comparison operators in if statements\nif (x == y) {\n    println('x and y are equal');\n}\n\nif (x > 5) {\n    println('x is greater than 5.');\n}\n```\n\n### Math\n\n```js\n// Operators:\n+\tAddition\n-\tSubtraction\n*\tMultiplication\n/\tDivision\n%\tModulus (Remainder)\n()\tParentheses (For order of operations)\n\n// Examples\nvar z = x + y;\nvar w = x * y;\n\n// Increment (add one)\nx++\n\n// Decrement (subtract one)\nx--\n\n// Shortcuts\nx = x + y;\t\tx += y;\nx = x - y;\t\tx -= y;\nx = x * y;\t\tx *= y;\nx = x / y;\t\tx /= y;\n\n// Absolute value\nvar abs = Math.abs(x);\n\n// Square root\nvar sqrt = Math.sqrt(x);\n\n// Rounding\n// Math.round() can be used to round numbers\nvar pi = 3.14;\nvar roundedPi = Math.round(pi);\nprintln(roundedPi);\t\t\t\t// prints out: 3\n\nvar goldenRatio = 1.618;\nvar roundedGoldenRatio = Math.round(goldenRatio);\nprintln(roundedGoldenRatio);\t\t// prints out: 2\n\n// Floor Division\n// Math.floor() can be used to perform floor\n// division. With floor division, only the\n// integer portion of the quotient is returned.\n\n// For example, 5/2 is 2.5, but with floor division,\n// the result is 2 and the .5 is discarded.\nvar result = Math.floor(5/2);\nprintln(result);\t\t\t\t\t// prints out: 2\n```\n\n### Randomizer\n\n```js\n// Random integer between low and high\nRandomizer.nextInt(low, high);\nRandomizer.nextBoolean();\nRandomizer.nextFloat(low, high);\nRandomizer.nextColor();\n\nvar roll = Randomizer.nextInt(1, 6);\n\nvar color = Randomizer.nextColor();\n```\n\n### Graphics\n\n#### Canvas\n\n```js\n// returns the width of the canvas\ngetWidth();\n\n// returns the height of the canvas\ngetHeight();\n\n// Examples\nvar height = getHeight();\n\n// Returns the x coordinate of the center\n// of the canvas\nvar center = getWidth() / 2;\n\n// Removes all objects from the canvas\nremoveAll();\n```\n\n#### Circles\n\n```js\n// To make a circle\nvar circle = new Circle(radius);\n\n// To set the location of the center of the circle\ncircle.setPosition(x, y);\n\n// Example, red circle with 50px radius with center at (100, 200)\nvar circle = new Circle(50);\ncircle.setPosition(100, 200);\ncircle.setColor(Color.red);\n\n// Get the radius\ncircle.getRadius(); // returns 50\nvar curRadius = circle.getRadius(); // store in variable\n\n// Change the radius\ncircle.setRadius(100);\n\n// Get the position of the center of the circle\nvar x = circle.getX(); // x is 100\nvar y = circle.getY(); // y is 200\n\n// Change the location of the circle\nvar x = getWidth() / 2;\nvar y = getHeight() / 2;\ncircle.setPosition(x, y); // circle center is in the center of the screen\n\n// Adding to and removing from screen\nadd(circle); // Add to screen\nremove(circle); // Remove from screen\n\n// Move the circle dx horizontally and dy vertically\ncircle.move(dx, dy);\n```\n\n#### Rectangles\n\n```js\n// To make a rectangle\nvar rect = new Rectangle(width, height);\n\n// To set location of the upper left corner of rectangle\nrect.setPosition(x, y);\n\n// Example, 200x50 blue rectangle with upper left corner at (100, 200)\nvar rect = new Rectangle(200, 50);\nrect.setPosition(100, 200);\nrect.setColor(Color.blue);\n\n// Get location of the upper left corner of the rectangle\nvar x = rect.getX(); // x is 100\nvar y = rect.getY(); // y is 200\n\n// Change location of the rectangle\nvar x = getWidth() / 2;\nvar y = getHeight() / 2;\nrect.setPosition(x, y); // upper left corner is at center of screen\n\n// Adding to and removing from screen\nadd(rect); // Add rectangle\nremove(rect); // Remove rectangle\n\n// Move the rect dx horizontally and dy vertically\nrect.move(dx, dy);\n```\n\n#### Arcs\n\n```js\n// To make an arc\nvar myArc = new Arc(radius, start, end, unit);\n\n// More specifically, the parameters are:\n//    1. radius of the arc\n//    2. starting angle of the arc\n//    3. ending angle of the arc\n//    4. angle unit (0 for degrees, 1 for radians)\n\n// To set the position of the center of the arc\nmyArc.setPosition(x, y);\n\n// Example, a 90-degree arc with\n// radius of 50 and color of red:\nvar myArc = new Arc(50, 0, 90, 0);\nmyArc.setPosition(100, 200);\nmyArc.setColor(Color.red);\n\n// Get the location of the center of the arc\nvar x = myArc.getX(); // x is 100\nvar y = myArc.getY(); // y is 200\n\n// Change the location of the center of the arc\nvar x = getWidth() / 2;\nvar y = getHeight() / 2;\nmyArc.setPosition(x, y); // arc center is at center of screen\n\n// Adding to and removing from screen\nadd(myArc); // Add arc\nremove(myArc); // Remove arc\n```\n\n#### Lines\n\n```js\n// To draw a line from (x1, y1) to (x2, y2)\nvar line = new Line(x1, y1, x2, y2);\n\n// Set the line color to green\nline.setColor(Color.green);\n\n// Set the line width to 10 pixels\nline.setLineWidth(10);\n\n// Adding to and removing from screen\nadd(line);\nremove(line);\n\n// Move the line dx horizontally and dy vertically\nline.move(dx, dy);\n\n// Change the starting point of the line to (x1, y1)\nline.setPosition(x1, y1);\n\n// Change the end point of the line to (x2, y2)\nline.setEndpoint(x2, y2);\n\n//Get the starting point of the line\nvar x = line.getX(); // x has same value as x1\nvar y = line.getY(); // y has same value as y1\n```\n\n#### Ovals\n\n```js\n// To make an Oval\nvar oval = new Oval(width, height);\n\n// To set location of the center of the oval\noval.setPosition(x, y);\n\n// Example, 200x50 blue oval with center at (100, 200)\nvar oval = new Oval(200, 50);\noval.setPosition(100, 200);\noval.setColor(Color.blue);\n\n// Get location of the center of the oval\nvar x = oval.getX(); // x is 100\nvar y = oval.getY(); // y is 200\n\n// Change location of the oval\nvar x = getWidth() / 2;\nvar y = getHeight() / 2;\noval.setPosition(x, y); // oval's center is at center of screen\n\n// Adding to and removing from screen\nadd(oval); // Add oval\nremove(oval); // Remove oval\n\n// Move the oval dx horizontally and dy vertically\noval.move(dx, dy);\n```\n\n#### Text\n\n```js\n// To make a graphical text object\nvar txt = new Text(label, font);\n\n// To set the position of the lower left corner of the text\ntxt.setPosition(x, y);\n\n// Example\nvar txt = new Text('Hello, world!', '30pt Arial');\ntxt.setPosition(100, 200);\ntxt.setColor(Color.blue);\n\n// Change what the text says\ntxt.setText('Goodbye!');\n\n// Get the location of the lower left corner of text\nvar x = txt.getX(); // x is 100\nvar y = txt.getY(); // y is 200\n\n// Change the location of the text\nvar x = getWidth() / 2;\nvar y = getHeight() / 2;\ntxt.setPosition(x, y); // text's lower left corner is\n// in the center of the screen\n\n// Adding to and removing from screen\nadd(txt); // Add text\nremove(txt); // Remove text\n\n// Move the text dx horizontally and dy vertically\ntxt.move(dx, dy);\n```\n\n#### Images\n\n```js\n// A web image can be added to the graphics canvas\n// as a WebImage. WebImages are created, sized,\n// and positioned much like other graphics objects.\n\n// To create a new WebImage, use a URL that links\n// directly to the image on the Internet (you will\n// not be able to use an image that is stored\n// only on your computer).\n\nvar copter = new WebImage(\n    'https://upload.wikimedia.org/' + 'wikipedia/commons/4/41/' + 'Bell_206L3_%28D-HASA%29.jpg'\n);\ncopter.setSize(300, 150);\ncopter.setPosition(getWidth() / 4, getHeight() / 2);\nadd(copter); // Adding copter to screen\nremove(copter); // Removing copter from screen\n\n// Note that the URL to the image must be directly\n// to the image file itself. It should end with\n// something like .png, .jpg, or another image file type.\n```\n\n#### Images Hosted on CodeHS\n\n*   https://codehs.com/static/img/library/characters/penguin.png\n*   https://codehs.com/static/img/library/characters/monkey.jpg\n*   https://codehs.com/static/img/library/characters/leopard.jpg\n*   https://codehs.com/static/img/library/characters/chameleon.jpg\n*   https://codehs.com/static/img/library/characters/lizard.jpg\n*   https://codehs.com/static/img/library/characters/butterfly.jpg\n*   https://codehs.com/static/img/library/objects/icicle.png\n*   https://codehs.com/static/img/library/objects/helicopter.png\n*   https://codehs.com/static/img/library/objects/asteroid.png\n*   https://codehs.com/static/img/library/objects/soccerBall.png\n*   https://codehs.com/static/img/library/landscapes/flowers.jpg\n\n#### Color\n\n```js\n// There are many color constants. You can set an objects\n// color like\nobj.setColor(color);\n\n// Specifically,\nobj.setColor(Color.RED);\n\n// List of available colors:\nColor.RED;\nColor.GREEN;\nColor.BLUE;\nColor.YELLOW;\nColor.CYAN;\nColor.ORANGE;\nColor.WHITE;\nColor.BLACK;\nColor.GRAY;\nColor.PURPLE;\n\n// You can also make your own color by giving a red, green,\n// and blue component like\nvar color = new Color(r, g, b);\n\n// The values are between 0-255 for each component. After making\n// a new color, you can use it to set the color of an object.\n\n// For example, to set an existing rectangle called\n// rect to be brown:\nvar brown = new Color(139, 69, 19);\nrect.setColor(brown);\n\n// Another way to set the color of an object is to use a\n// string with the hexadecimal color value with setColor.\n// For example, to set a rect object to be pink:\nrect.setColor('#FF66CC');\n\n// Other fun functions\n// Return a random color\nvar color = Color.randomRed();\nvar color = Color.randomGreen();\nvar color = Color.randomBlue();\n\n// Get a random color from the randomizer\nvar color = Randomizer.nextColor();\n```\n\n#### Rotation\n\n```js\n/**\n * The following graphic objects can be rotated:\n * - Rectangle\n * - Arc\n * - Line\n * - Oval\n * - Text\n * - WebImage\n */\n\n// Set the rotation of the rectangle with these parameters:\n//    1. angle to rotate\n//    2. angle unit (0 for degrees, 1 for radians)\n//       This will default to degrees.\nrect.setRotation(45, 0); // Sets rotation of the rectangle to 45 degrees\nrect.setRotation(45); // Does the same thing.\n\nrect.setRotation(Math.PI / 2, 1); // Sets rotation of the rectangle to Math.PI/2 radians\n\n// Add rotation with these parameters:\n//    1. angle to rotate\n//    2. angle unit (0 for degrees, 1 for radians)\n//       This will default to degrees.\nrect.rotate(45, 0); // Rotates the rectangle by 45 degrees\nrect.rotate(45); // Does the same thing.\n\nrect.rotate(Math.PI / 2, 1); // Rotates the rectangle by Math.PI/2 radians\n```\n\n### Booleans\n\n```js\n// A boolean is either true or false\nvar myBoolean = true;\n\nvar anotherBoolean = false;\n\nvar result = readBoolean('Question? ');\n\n// Not Operator\nvar x = !y; // x gets the opposite of y\n\n// And Operator\nvar andExp = x && y;\n\n// Or Operator\nvar orExp = x || y;\n\n// You can combine many booleans!\nvar boolExp = x && (y || z);\n```\n\n### If Statements\n\n```js\nif (BOOLEAN_EXPRESSION) {\n    // code to execute if true\n}\n\nif (BOOLEAN_EXPRESSION) {\n    // code if true\n} else {\n    // code if false\n}\n\nif (x < 0) {\n    println('x is negative.');\n}\n\nif (color == 'red' || color == 'blue' || color == 'yellow') {\n    println('Primary color.');\n} else {\n    println('Not a primary color.');\n}\n\n// You can use else if if you have multiple\n// conditions, but only one should happen.\nif (condition_1) {\n} else if (condition_2) {\n} else if (condition_3) {\n} else {\n}\n\n// You can always write these using nested\n// if/else. For example:\nif (condition_1) {\n    // code here runs if condition 1 is true\n} else {\n    if (condition_2) {\n        // if condition 2 is true\n    } else {\n        // and here if condition 2 is false\n    }\n}\n```\n\n### For Loops\n\n```js\nvar COUNT = 5;\n\nfor (var i = 0; i < COUNT; i++) {\n    /* Repeat code betweeen the brackets 5 times,\n                                                        \t * as the COUNT variable is 5. */\n}\n\n// Print numbers 0-9\nfor (var i = 0; i < 10; i++) {\n    println(i);\n}\n```\n\n### While Loops\n\n```js\nwhile(boolean expression){\n\t/* Repeat code betweeen brackets while\n\t * 'boolean expression' is true */\n}\n\n// Countdown from from 15 to 10\nvar i = 15;\nwhile(i > 10){\n\tprintln(i);\n\ti--;\n}\n\n// This is a loop and a half format\nwhile(true){\n\t// code\n\tif(condition){\n\t\tbreak;\n\t}\n}\n```\n\n### Timers\n\n```js\nsetTimer(fn, delay); // Create a timer\nstopTimer(fn); // Stop a timer\n\n// Example: call moveBall every 40 milliseconds\n\nfunction moveBall() {\n    ball.move(x, y);\n}\n\nfunction start() {\n    setTimer(moveBall, 40);\n}\n```\n\n### Mouse Events\n\n```js\n// Mouse events are used to create programs\n// that respond to users' mouse clicks, drags,\n// and movements.\n\n// When the mouse event occurs, the function\n// registered with the event will be called. Note\n// that you leave out the parentheses () when\n// passing the name of the function.\n\n// Here is a list of mouse events that can be used:\nmouseMoveMethod(functionToCall); // on mouse movement\nmouseClickMethod(functionToCall); // on mouse clicks\nmouseDragMethod(functionToCall); // on mouse drags\nmouseDownMethod(functionToCall); // mouse button depressed\nmouseUpMethod(functionToCall); // mouse button released\n\n// Sample program using mouse events\nfunction start() {\n    // Set up mouse callbacks\n    mouseMoveMethod(onMouseMove);\n    mouseClickMethod(addBall);\n    mouseDragMethod(updateLine);\n}\n\nfunction onMouseMove(e) {\n    println('Mouse is at (' + e.getX() + ', ' + e.getY() + ').');\n}\n\nfunction addBall(e) {\n    var ball = new Circle(20);\n    ball.setPosition(e.getX(), e.getY());\n    add(ball);\n}\n\nfunction updateLine(e) {\n    line.setEndpoint(e.getX(), e.getY());\n}\n```\n\n### Keyboard Events\n\n```js\nfunction start() {\n    // Set up keyboard callbacks\n    keyDownMethod(keyDown);\n    keyUpMethod(keyUp);\n}\n\nfunction keyDown(e) {\n    if (e.keyCode == Keyboard.LEFT) {\n        ball.move(-5, 0);\n    }\n    if (e.keyCode == Keyboard.letter('K')) {\n        println('You pressed K');\n    }\n}\n\nfunction keyUp(e) {\n    println('You lifted up a key');\n}\n```\n\n### Audio Files\n\n```js\n// To add a sound file to a program, first create a variable\n// to store the sound you want. Be sure to use a link\n// directly to the audio file itself (for example,\n// if it's an mp3, the link should end with .mp3).\n// The link must be a full URL to a sound file that\n// is available on the internet.\nvar mySong = new Audio('link_to_sound_file.mp3');\n\n// To play the file, use .play()\nmySong.play();\n\n// To pause a file, use .pause()\nmySong.pause();\n\n// To loop a file, first play the file,\n// then set .loop to true:\nmySong.play();\nmySong.loop = true;\n```\n\n### Arrays\n\n```js\n// Create an empty array\nvar arr = [];\n\n// Create an array with values\nvar arr = [1, 2, 4];\n\n// An array can have any type\nvar arr = [4, 'hello', x];\n\n// Access an element in an array\nvar elem = arr[i];\n\nvar firstElem = arr[0];\n\n// Set an element in an array\narr[4] = 9;\n\n// Looping over an array\nfor (var i = 0; i < arr.length; i++) {\n    var cur = arr[i];\n    // process cur\n}\n\n// length of an array\nvar length = arr.length;\n\n// Add to an array\narr.push(elem);\n\n// Remove last element from array\nvar last = arr.pop();\n\n// Finding an element in a list\nvar index = arr.indexOf(5);\n\n// Remove an element from a list at index i\narr.remove(i);\n```\n\n### Maps/Objects\n\n```js\n// Object literal\nvar obj = {\n    name: 'Jeremy',\n    color: 'blue',\n};\n\n// Objects/Maps have a collection of key, value pairs\n\n// Set a value\nobj['Jeremy'] = '123-4567';\n\n// Get a value for a key\nvar phone = obj['Jeremy'];\n\n// Loop over an object\nfor (var key in obj) {\n    var val = obj[key];\n    // process key and val\n}\n```\n\n### Sets\n\n```js\n// Make a new set named \"newSet\"\nvar newSet = new Set();\n\n// Add to a set\nnewSet.add(5);\n\n// Does a set contain a value\nnewSet.contains(5); // returns a boolean\n\n// Number of elements in the set\nnewSet.size(); // returns an integer\n\n// Make a new set named \"setA\"\nvar setA = new Set();\n// Add 2 numbers to the set\nsetA.add(1);\nsetA.add(2);\n// Make a new set named \"setB\"\nvar setB = new Set();\n// Add 2 numbers to the set\nsetB.add(2);\nsetB.add(3);\n\n// Assign setA to a new variable named \"mutualSet\"\nvar mutualSet = setA;\n// Call the intersect function on \"mutualSet\" and pass in \"setB\"\nmutualSet.intersect(setB);\nreturn mutualSet; // returns a set with the shared values from \"setA\" and \"setB\"\n```\n\n### Grids\n\n```js\n// Create a grid named \"newGrid\"\nvar newGrid = new Grid(rows, cols);\n\n// Get a value in a grid\nvar elem = newGrid.get(row, col);\n\n// Set a value in a grid\nnewGrid.set(row, col, val);\n\n// Getting dimensions\nvar rows = newGrid.numRows();\nvar cols = newGrid.numCols();\n\n// Is a row, col pair inbounds\nnewGrid.inBounds(row, col);\n\n// Set all values in grid to initial value\nnewGrid.init(0); // sets all grid values to 0\n\n// Initialze a grid from an array\nnewGrid.initFromArray([\n    [6, 3, 2], // 0th row\n    [2, 5, 1], // 1st row\n    [4, 3, 9], // 2nd row\n    [1, 5, 1], // 3rd row\n]);\n```\n");break;case g.l.VANILLA_JS:n=d()("## JavaScript Documentation\n\n### Basics\n\n*   [Printing](#printing)\n*   [Variables](#variables)\n*   [Functions](#functions)\n*   [User Input](#user-input)\n*   [Comparison Operators](#comparison-operators)\n*   [Math](#math)\n*   [Random](#random)\n\n### Control Structures\n\n*   [Booleans](#booleans)\n*   [If Statements](#if-statements)\n*   [For Loops](#for-loops)\n*   [While Loops](#while-loops)\n\n### Data Structures\n\n*   [Arrays](#arrays)\n*   [Maps/Objects](#maps-objects)\n\n### Printing\n\n```js\nconsole.log(str);\nprint(str);\n\n// Example:\nconsole.log('Hello world.');\n```\n\n### Variables\n\n```js\n// Declare a variable\nvar myVarName;\n\n// Initialize a variable\nvar myVarName = 5;\n\n// Assign to an existing variable\nmyVarName = 10;\n\n// Print a variable\nconsole.log(myVarName);\nconsole.log('The value is: ' + myValue);\n```\n\n### Functions\n\n```js\n// Functions can take in values, called parameters.\n// The function below takes in a parameter called\n// 'input' and prints it.\nfunction printText(input) {\n    console.log(input);\n}\n\n// Functions can also return a value.\n// The function below takes in a value,\n// adds two to it, and returns it.\nfunction addTwo(number) {\n    return number + 2;\n}\n```\n\n### User Input\n\n```js\n// Read a string\nvar str = prompt();\n```\n\n### Comparison Operators\n\n```js\n// Comparison operators return booleans (true/false values)\n\nx == y; // is x equal to y\nx != y; // is x not equal to y\nx > y; // is x greater than y\nx >= y; // is x greater than or equal to y\nx < y; // is x less than y\nx <= y; // is x less than or equal to y\n\n// Comparison operators in if statements\nif (x == y) {\n    console.log('x and y are equal');\n}\n\nif (x > 5) {\n    console.log('x is greater than 5.');\n}\n```\n\n### Math\n\n```js\n// Operators:\n+\tAddition\n-\tSubtraction\n*\tMultiplication\n/\tDivision\n%\tModulus (Remainder)\n()\tParentheses (For order of operations)\n\n// Examples\nvar z = x + y;\nvar w = x * y;\n\n// Increment (add one)\nx++\n\n// Decrement (subtract one)\nx--\n\n// Shortcuts\nx = x + y;\t\tx += y;\nx = x - y;\t\tx -= y;\nx = x * y;\t\tx *= y;\nx = x / y;\t\tx /= y;\n\n// Absolute value\nvar abs = Math.abs(x);\n\n// Square root\nvar sqrt = Math.sqrt(x);\n\n// Rounding\n// Math.round() can be used to round numbers\nvar pi = 3.14;\nvar roundedPi = Math.round(pi);\nconsole.log(roundedPi);\t\t\t\t// prints out: 3\n\nvar goldenRatio = 1.618;\nvar roundedGoldenRatio = Math.round(goldenRatio);\nconsole.log(roundedGoldenRatio);\t\t// prints out: 2\n\n// Floor Division\n// Math.floor() can be used to perform floor\n// division. With floor division, only the\n// integer portion of the quotient is returned.\n\n// For example, 5/2 is 2.5, but with floor division,\n// the result is 2 and the .5 is discarded.\nvar result = Math.floor(5/2);\nconsole.log(result);\t\t\t\t\t// prints out: 2\n```\n\n### Randomizer\n\n```js\n// Random number between 0 and 1\nvar x = Math.random()\n\n// Random integer between 0 and N\nMath.floor(Math.random() * N);\n```\n\n### Booleans\n\n```js\n// A boolean is either true or false\nvar myBoolean = true;\n\nvar anotherBoolean = false;\n\n// Not Operator\nvar x = !y; // x gets the opposite of y\n\n// And Operator\nvar andExp = x && y;\n\n// Or Operator\nvar orExp = x || y;\n\n// You can combine many booleans!\nvar boolExp = x && (y || z);\n```\n\n### If Statements\n\n```js\nif (BOOLEAN_EXPRESSION) {\n    // code to execute if true\n}\n\nif (BOOLEAN_EXPRESSION) {\n    // code if true\n} else {\n    // code if false\n}\n\nif (x < 0) {\n    console.log('x is negative.');\n}\n\nif (color == 'red' || color == 'blue' || color == 'yellow') {\n    console.log('Primary color.');\n} else {\n    console.log('Not a primary color.');\n}\n\n// You can use else if if you have multiple\n// conditions, but only one should happen.\nif (condition_1) {\n} else if (condition_2) {\n} else if (condition_3) {\n} else {\n}\n\n// You can always write these using nested\n// if/else. For example:\nif (condition_1) {\n    // code here runs if condition 1 is true\n} else {\n    if (condition_2) {\n        // if condition 2 is true\n    } else {\n        // and here if condition 2 is false\n    }\n}\n```\n\n### For Loops\n\n```js\nvar COUNT = 5;\n\nfor (var i = 0; i < COUNT; i++) {\n    /* Repeat code betweeen the brackets 5 times,\n                                                            \t * as the COUNT variable is 5. */\n}\n\n// Print numbers 0-9\nfor (var i = 0; i < 10; i++) {\n    console.log(i);\n}\n```\n\n### While Loops\n\n```js\nwhile(boolean expression){\n\t/* Repeat code betweeen brackets while\n\t * 'boolean expression' is true */\n}\n\n// Countdown from from 15 to 10\nvar i = 15;\nwhile(i > 10){\n\tconsole.log(i);\n\ti--;\n}\n\n// This is a loop and a half format\nwhile(true){\n\t// code\n\tif(condition){\n\t\tbreak;\n\t}\n}\n```\n\n### Arrays\n\n```js\n// Create an empty array\nvar arr = [];\n\n// Create an array with values\nvar arr = [1, 2, 4];\n\n// An array can have any type\nvar arr = [4, 'hello', x];\n\n// Access an element in an array\nvar elem = arr[i];\n\nvar firstElem = arr[0];\n\n// Set an element in an array\narr[4] = 9;\n\n// Looping over an array\nfor (var i = 0; i < arr.length; i++) {\n    var cur = arr[i];\n    // process cur\n}\n\n// length of an array\nvar length = arr.length;\n\n// Add to an array\narr.push(elem);\n\n// Remove last element from array\nvar last = arr.pop();\n\n// Finding an element in a list\nvar index = arr.indexOf(5);\n\n// Remove an element from a list at index i\narr.remove(i);\n```\n\n### Maps/Objects\n\n```js\n// Object literal\nvar obj = {\n    name: 'Jeremy',\n    color: 'blue',\n};\n\n// Objects/Maps have a collection of key, value pairs\n\n// Set a value\nobj['Jeremy'] = '123-4567';\n\n// Get a value for a key\nvar phone = obj['Jeremy'];\n\n// Loop over an object\nfor (var key in obj) {\n    var val = obj[key];\n    // process key and val\n}\n```\n");break;case g.l.HTML:n=d()('HTML Documentation\n------------------\n\n## Basics\n*   [HTML File Skeleton](#html-file-skeleton)\n*   [HTML Tags](#tags)\n*   [HTML Attributes](#html-attributes)\n*   [Headers](#header-tags)\n*   [Basic Tags](#basic-tags)\n*   [Horizontal Lines](#horizontal-lines)\n*   [Links](#links)\n*   [Images](#images)\n*   [Lists](#lists)\n*   [Tables](#tables)\n*   [Comments](#comments)\n\n## CSS Basics\n*   [Inline Style](#inline-styling)\n*   [Adding CSS to HTML Page](#adding-css-to-html-page)\n*   [Adding External CSS](#adding-external-css)\n*   [CSS Syntax](#css-syntax)\n*   [CSS Comments](#css-comments)\n*   [Select By Tag](#selecting-by-tag)\n*   [Select By Class](#selecting-by-class)\n*   [Select By ID](#selecting-by-id)\n*   [Grouping with Divs](#divs)\n*   [Grouping with Spans](#spans)\n\n## CSS Properties\n*   [Color](#color)\n*   [Color Names](#color-names)\n*   [RGB Colors](#rgb-colors)\n*   [Hex Color Codes](#hex-color-values)\n*   [Text and Font](#text-and-font)\n*   [Background](#background)\n*   [Border](#border)\n*   [Margin](#margin)\n*   [Padding](#padding)\n\n## Bootstrap\n*   [Bootstrap Basics](#bootstrap-basics)\n*   [Adding Bootstrap](#adding-bootstrap)\n*   [More Bootstrap](#more-bootstrap)\n\n\n---\n\n### HTML File Skeleton\n\nThis is a simple html file skeleton that you can use to get you started on a project. To get info on specific tags see below.\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Your Page Title</title>\n\t</head>\n\n\t<body>\n\t\tInside the body tag is where you put all the cool stuff\n\t\tyou want on your page!\n\t</body>\n</html>\n```\n\nThe !DOCTYPE declaration must be the very first thing in your html document. It is not an html tag, it is an instruction to the web browser about what version of HTML the page is written in.\n\nThe html tag tells the browser that this is an html document.\n\nThe head element is a container for all the head elements, which can include a title for a document, scripts, styles, and more. The title tag defines the title of the page.\n\nThe body element contains all the contents of an HTML document, such as text, hyperlinks, images, tables, and lists.\n\n\n\n### Tags\n\nHTML tags are keywords that define how the browser must format and display content.\n\nA basic HTML element starts like this:\n```html\n<tag>\n    It starts with an opening tag and ends with a closing tag.\n    The closing tag has the same name as the opening tag, but with a /\n    Everything inside should be indented one level.\n</tag>\n```\n\n\n\n### HTML Attributes\n\nAttributes can be added to any tag to add more information about the tag.\nThe general format for adding an attribute and a value for the attribute is:\n\n```html\n<tag attribute="value">Tag content here</tag>\n```\n\nExample HTML:\n```html\n<img src="https://codehs.com/static/img/logo.png" height="50px">\n```\n\nExample result:\n<img src="https://codehs.com/static/img/logo.png" height="50px">\n\n### Header Tags\n\nThe <h1\\> to <h6\\> tags are used to define HTML headings. <h1\\> defines the most important heading. <h6\\> defines the least important heading.\n\nExample HTML:\n```html\n<h1>Level 1 Header</h1>\n<h2>Level 2 Header</h2>\n<h3>Level 3 Header</h3>\n```\n\nExample Result:\n\n<h1>Level 1 Header</h1>\n<h2>Level 2 Header</h2>\n<h3>Level 3 Header</h3>\n\n\n\n### Basic Tags\n\nThe <p\\> tag defines a paragraph.\nThe <i\\> tag displays text in italics.\nThe <b\\> tag displays text in bold.\n\n\nExample HTML:\n```html\n<p>\n    This is a paragraph where <i>this will display in italics</i>\n    and <b>this will display in bold</b>.\n</p>\n```\n\nExample Result:\n\n<p>\nThis is a paragraph where <i>this will display in italics</i> and <b>this will display in bold</b>.\n</p>\n\n### Horizontal Lines\n\nThe <hr\\> tag defines a thematic break with a horizontal rule.\n\nExample HTML:\n\n```html\n<p>\n    This is a section about a certain theme.\n</p>\n<hr>\n<p>\n    This is a section about another theme separated from the previous section\n    by a horizontal line that implies a thematic break in content.\n</p>\n```\n\nExample Result:\n\n<p>\n    This is a section about a certain theme.\n</p>\n<hr>\n<p>\n    This is a section about another theme separated from the previous section\n    by a horizontal line that implies a thematic break in content.\n</p>\n\n### Links\n\nThe <a\\> tag creates a hyperlink that is used to link from one page to another. The href attribute indicates the link\'s destination.\n\n\n\nExample HTML:\n\n```html\n<a href = "https://google.com">Google</a>\n```\n\nExample Result:\n\n<a href = "https://google.com">Google</a>\n\n\n### Images\n\nThe <img\\> tag defines an image in an HTML page.\n\nThe src attribute indicates where the image is coming from and can be either a directory path to a photo saved on your computer or the url of an image on the internet like the example below.\n\nThe alt attribute specifies alternate text that will display if the image cannot be loaded.\n\nThe width and height attributes specify the width and height of the image.\n\n\nExample HTML:\n```html\n<img src = "https://codehs.com/static/img/logo.png" alt="Image not found" width="50px" height="50px">\n```\nExample Result:\n\n<img src = "https://codehs.com/static/img/logo.png" alt="Image not found" width="50px" height="50px">\n\n\n### Lists\n\nThe <ul\\> tag defines an unordered list (bullet points)\nThe <ol\\> tag defines an ordered list (numbered list)\nThe <li\\> tag defines a single list item inside of a list\n\n\nExample HTML:\n```html\n<ol>\n    <li>Item one</li>\n    <li>Item two</li>\n    <li>Item three</li>\n</ol>\n<ul>\n    <li>Item A</li>\n    <li>\n        Item B\n        <ol>\n            <li>Subitem 1</li>\n            <li>Subitem 2</li>\n        </ol>\n    </li>\n    <li>Item C</li>\n</ul>\n```\nExample Result:\n\n<ol>\n    <li>Item one</li>\n    <li>Item two</li>\n    <li>Item three</li>\n</ol>\n<ul>\n    <li>Item A</li>\n    <li>\n        Item B\n        <ol>\n            <li>Subitem 1</li>\n            <li>Subitem 2</li>\n        </ol>\n    </li>\n    <li>Item C</li>\n</ul>\n\n### Tables\n\nThe <table\\> tag defines a table element that can contain several individual table rows.\nThe <thead\\> tag groups together the header information in the table.\nThe <tbody\\> tag groups together the body information in the table. The <tr\\> tag defines a single row in the table. The tr element can contain several cells of information.\nThe <th\\> tag defines a table header. th tags are commonly used in the first row of the table to show the headers of each column.\nThe <td\\> tag defines a table data element, a single cell of information. td elements go inside of a table row.\nThe border attribute defines how thick the table border is (default is no border)\n\n\n\nExample HTML:\n```html\n<table border="1">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Favorite Color</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Sam</td>\n            <td>Purple</td>\n        </tr>\n        <tr>\n            <td>Taylor</td>\n            <td>Orange</td>\n        </tr>\n    </tbody>\n</table>\n```\n\nExample Result:\n\n<table border="1">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Favorite Color</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>Sam</td>\n            <td>Purple</td>\n        </tr>\n        <tr>\n            <td>Taylor</td>\n            <td>Orange</td>\n        </tr>\n    </tbody>\n</table>\n\n### Comments\n\nThe comment tag is used to insert helpful notes into the HTML code. Comments are not displayed in the resulting web page, they are only there for the reader of the code.\n\nUsing comments in your code can help you maintain clean, clear, and understandable code.\n\n```html\n\x3c!-- Your comment goes here. --\x3e\n\n\x3c!-- This section of the webpage links to other parts of the site --\x3e\n<a href="about.html">About</a>\n<a href="home.html">Home</a>\n```\n\n\nCSS Documentation\n-----------------\n\n### Inline Styling\n\nThe style attribute of an element lets you style that single element.\nThe format for the style attribute is:\n\n```html\n<tagname style="property: value;">\n```\n\nYou can add multiple styles to one element:\n\n```\nstyle="property1: value1; property2: value2;"\n```\n\nExample HTML:\n```html\n<h3 style="background-color:LightBlue;">My Journal</h3>\n<p style="background-color:LightYellow; font-size:15px;">Today I walked my puppy at the park and made my own website.</p>\n```\n\nExample Result:\n\n<h3 style="background-color:LightBlue;">My Journal</h3>\n<p style="background-color:LightYellow; font-size:15px;">Today I walked my puppy at the park and made my own website.</p>\n\n\nFor a full list of properties and values that can be used, go to [CSS Properties](#css-properties)\n\n\n### Adding CSS to HTML Page\n\nInstead of adding a style attribute to each element, we can use CSS code to select and style several elements at once.\nThe CSS code goes inside the <style\\> tag which goes in the <head\\> element.\nThe style is separate from the content of the page. Because it is metadata about the content, it belongs in the head.\n\nExample:\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        /*\n         * This will select all h1 elements\n         * and give them a font size of 30px\n         * and a color of red.\n         */\n        h1 {\n            font-size: 30px;\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <h1>CodeHS</h1>\n</body>\n```\n\nResult:\n\n<h1 style="font-size:30px; color:red;">CodeHS</h1>\n\n### Adding External CSS\n\nRather than putting all of our CSS rules in a style tag, it\'s also possible to add CSS code that\'s written in a separate file. The file should be a .css file, such as my\\_style.css\nThe external CSS file should be added to the page using a <link\\> tag in the <head\\> of the HTML page.\n\nExample:\n\nmy\\_page.html\n```html\n<html>\n    <head>\n        <title>Your Page Title</title>\n        <link rel="stylesheet" type="text/css" href="my\\_style.css">\n    </head>\n    <body>\n        <h1>CodeHS</h1>\n    </body>\n</html>\n```\n\nmy\\_style.css\n```\n/*\n * This will select all h1 elements\n * and give them a font size of 30px\n * and a color of red.\n */\nh1 {\n    font-size: 30px;\n    color: red;\n}\n```\n\nResult:\n\n<h1 style="font-size:30px; color:red;">CodeHS</h1>\n\n\n### CSS Syntax\n\nIn CSS the selector defines which HTML elements the CSS rule apples to. CSS declarations are inside braces and define the style. Properties are which features are being styled and the value of a property is how the feature is being styled.\n\n```\n/* General format */\nselector {\n    property: value;\n    property: value;\n}\n\n/*\n * In this CSS rule, h1 is the selector, and each line\n * inside the braces is a CSS declaration.\n *\n * This rule will select all h1 elements, set their font-size\n * property to be 60px, and set their color property to be red.\n */\nh1 {\n    font-size: 60px;\n    color: red;\n}\n```\n\nFor a full list of properties and values that can be used, go to [CSS Properties](#css-properties)\n\n### CSS Comments\n\nIt\'s important to add comments to your CSS code to explain to the reader what each rule is doing. Comments are ignored by the browser when the page is displayed. Comments are there to help the reader of the code understand what is going on.\n\nA CSS comment starts with /* and ends with */\n\nExample:\n```\nh1 {\n    /* This is a single line comment */\n    color: red;\n}\n\n/*\n * This is a multi-line comment that\n * spans multiple lines\n */\nh2 {\n    color: green;\n}\n```\n\n\n### Selecting By Tag\n\nWe can select html elements to style by their tag. If we use a tag as a selector, it selects **all** the elements with that tag.\n\n```\n/*\n * This CSS rule will select all images\n * and their height will be set to 200 pixels\n */\n\nimg {\n    height: 200px;\n}\n```\n\n\n### Selecting by Class\n\nClass is an attribute that we can add to html tags to style a group of elements. If we use a class as a selector, it selects all the elements that share that class.\n\n**The class style overrides tag style in case of a conflict.** In other words, if a select-by-tag rule says that the element should be red, and a select-by-class rule says the same element should be green, the class rule takes precedence and the element will be green.\nYou can add a class to a tag like this:\n\n```html\n<tag class="class-name"></tag>\n```\n\nYou can add multiple classes to a tag by separating class names with spaces:\n\n```html\n<tag class="class1 class2 class3"></tag>\n```\n\nClass names\n\n* Cannot start with a number\n* Should be all lowercase\n* Should use dashes (-) between words i.e. "class-name"\n* Should be descriptive\n\nTo select all elements with the same class, the CSS selector should have a period followed by the class name:\n`.class-name`\n\nExample:\n\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        /*\n         * This rule will apply to all the elements with\n         * the "alert" class\n         */\n        .alert {\n            color: red;\n        }\n\n        /*\n         * This rule will apply to only <h1> elements\n         * with the class "alert"\n         */\n        h1.alert {\n            font-size: 20px;\n        }\n\n        /*\n         * This rule will apply to all elements with the\n         * "morning-greeting" class\n         */\n        .morning-greeting {\n            background-color: LightYellow;\n        }\n    </style>\n</head>\n<body>\n    <h1 class="alert morning-greeting">Good Morning!</h1>\n    <p class="alert">Hi!</p>\n</body>\n```\n\nResult:\n\n<h1 style="font-size:20px; color:red; background-color:LightYellow;">Good Morning!</h1>\n<p style="color:red">Hi!</p>\n\n\n### Selecting by ID\n\nid is an attribute that we can add to an HTML tag to style that specific element.\nAn element can only have one id and the id of an element should be unique.\nThere should be only one tag with a given id on any web page.\nUsing the ID as a selector will select the one element that has that ID.\n\n**The id style overrides both tag and class style in case of a conflict.** In other words, if a select-by-tag rule says that the element should be red, and a select-by-class rule says the same element should be green, and a select-by-id rule says that the same element should be yellow, the id rule takes precedence and the element will be yellow.\nYou can add an id to a tag like this:\n\n```html\n<tag id="id-name"></tag>\n```\n\nid names:\n\n*   Cannot start with a number\n*   Should be all lowercase\n*   Should use dashes between words i.e. "id-name"\n*   Should be descriptive\n\nTo select an element with a specific id, the CSS selector should have a hashtag followed by the id name:\n`#id-name`\n\nExample:\n\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        /*\n         * This rule will apply to the single element\n         * with the id "logo"\n         */\n        #logo {\n            font-size: 20px;\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <h1 id="logo">CodeHS</h1>\n</body>\n```\n\nResult:\n\n<h1 style="font-size: 20px; color:red;">CodeHS</h1>\n<br>\n\n\n### Divs\n\nDivs are used to group together several different HTML elements into one block. A div creates a new block of elements, a block always starts on a new line and takes up the full width available in its container.\nGrouping elements together in a div allows us to style that block as one unit.\n\nExample HTML:\n\n```html\n<div id="block-one">\n    <h3>Welcome</h3>\n    <p>Welcome to my web page.</p>\n</div>\n<div id="block-two">\n    <ul>\n        <li>Home</li>\n        <li>About</li>\n    </ul>\n</div>\n```\n\nExample CSS:\n```\n#block-one {\n    color: red;\n}\n\n#block-two {\n    color: blue;\n}\n```\nExample Result:\n\n<div id="block-one" style="color:red;">\n    <h3>Welcome</h3>\n    <p>Welcome to my web page.</p>\n</div>\n<div id="block-two" style="color:blue;">\n    <ul>\n        <li>Home</li>\n        <li>About</li>\n    </ul>\n</div>\n\n### Spans\n\nSpans are used to group together smaller chunks of HTML code in-line. Spans do not create a new block, they are usually used to add style to a small chunk of HTML inside of a line (such as a line in a paragraph).\n\nExample HTML:\n\n```html\n<p>This is a <span class="big">paragraph</span> of <span class="small">text</span></p>\n```\nExample CSS:\n```\n.big {\n    font-size: 20px;\n}\n\n.small {\n    font-size: 8px;\n}\n```\n\nExample Result:\n\n<p>This is a <span style="font-size:20px;">paragraph</span> of <span style="font-size:8px;">text</span></p>\n\nCSS Properties\n--------------\n\nThis section covers some of the most commonly used CSS properties and values. For a full list of possible CSS properties and values, visit [W3 Schools](https://www.w3schools.com/cssref/)\n\n### Color\n\nCSS Colors can either be:\n\n*   A valid color name, such as "Blue" or "DarkGreen"\n*   An RGB value, such as "rgb(255, 0, 0)"\n*   A HEX color code, such as "#68ff00"\n\n### Color Names\n\nCommon color names:\n\n*   red\n*   orange\n*   yellow\n*   green\n*   blue\n*   cyan\n*   indigo\n*   black\n*   white\n\nNames are not case-sensitive. "RED" is the same as "red".\nThere are 140 valid color names. See a full list of all names [here](https://www.w3schools.com/colors/colors_names.asp)\n\nExample:\n```\np {\n    color: blue;\n}\n```\n\nResult:\n\n<p style="color:blue">Hello</p>\n\n### RGB Colors\n\nHTML and CSS represent colors with the RGB (Red Green Blue) color encoding system.\nEvery color can be made just by mixing different amounts of red, green, and blue.\n\nRGB color values can be specified in CSS using "rgb(red, green, blue)"\n\n*   Each value can be between 0 and 255, inclusive.\n*   rgb(255, 0, 0) would be red\n*   rgb(255, 255, 255) would be white\n*   rgb(0, 0, 0) would be black\n\nExample:\n\n```\np {\n    color: rgb(255, 0, 0);\n}\n```\n\nResult:\n\n<p style="color:rgb(255, 0, 0);">Hello</p>\n\n### Hex Color Values\n\nWe can also represent RGB colors using hexadecimal values. 6 hexadecimal digits make up a color:\n\n*   The first two hexadecimal digits specify the amount of RED in the color\n*   The next two hexadecimal digits specify the amount of GREEN in the color\n*   The last two hexadecimal digits specify the amount of BLUE in the color\n*   Each digit can be a value from 0 to F, with 0 being the least and F being the most\n*   "#ff0000" would be red\n*   "#ffffff" would be white\n*   "#000000" would be black\n\nExample:\n\n```\np {\n    color: #0000ff;\n}\n```\n\nResult:\n\n<p style="color:#0000ff;">Hello</p>\n\n### Text and Font\n\n- **color:** text color in the selected HTML element\n- **font-size:** size of the font (e.g. 30px)\n- **font-family:** font family (e.g. Arial or Times)\n- **font-style:** font style (e.g. italic or normal)\n- **font-weight:** how thick the font is (bold or bolder, or a value from 100 to 900)\n- **text-align:** sets the horizontal alignment of text (center, left, right)\n\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        h1 {\n            font-size: 100px;\n            font-weight: bold;\n            color: blue;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to my blog!</h1>\n</body>\n```\n\nFor a full list of possible CSS properties and values, visit [W3 Schools](https://www.w3schools.com/cssref/)\n\n### Background\n\n- **background-color:** background color in the selected HTML element\n- **background-image:** specifies one or more background images\n- **background-repeat:** sets how many times the background image will be repeated\n\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        body {\n            backgromund-image: url("sandpaper.gif");\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to my blog!</h1>\n</body>\n```\n\nFor a full list of possible CSS properties and values, visit [W3 Schools](https://www.w3schools.com/cssref/)\n\n### Border\n\nThe border properties allow us to create borders around any HTML element!\n- **border-color:** sets border color for all four border sides\n- **border-width:** sets the width of the border for all four border sides\n- **border-style:** sets the style of the border for all four border sides (solid, dotted, dashed, double)\n- **border-size:** sets the size of the border for all four border sides\n- **border-right-color:** sets border color for right border\n- **border-right-width:** sets the width of the border for right -border\n- **border-right-style:** sets the style of the border for right border (solid, dotted, dashed, double)\n- **border-right-size:** sets the size of the border for right border\n- **border-left-color:** sets border color for left border\n- **border-left-width:** sets the width of the border for left border\n- **border-left-style:** sets the style of the border for left border (solid, dotted, dashed, double)\n- **border-left-size:** sets the size of the border for left border\n- **border-top-color:** sets border color for top border\n- **border-top-width:** sets the width of the border for top border\n- **border-top-style:** sets the style of the border for top border (solid, dotted, dashed, double)\n- **border-top-size:** sets the size of the border for top border\n- **border-bottom-color:** sets border color for bottom border\n- **border-bottom-width:** sets the width of the border for bottom border\n- **border-bottom-style:** sets the style of the border for bottom border (solid, dotted, dashed, double)\n- **border-bottom-size:** sets the size of the border for bottom border\n\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        h1 {\n            border-color: green;\n            border-width: 2px;\n            border-style: dashed;\n        }\n    </style>\n</head>\n<body>\n    <h1>I love using CodeHS!</h1>\n</body>\n```\n\nFor a full list of possible CSS properties and values, visit [W3 Schools](https://www.w3schools.com/cssref/)\n\n### Margin\n\nThe margin is the amount of space between an element and the elements around it. The margin is set with a value of pixels, but it can also be set to auto.\nSetting the margin to auto centers the element within its container.\n- **margin:** shorthand to set the margin of top, right, bottom, and left (in that order)\n- **margin-top:** sets the margin for the top of the container\n- **margin-right:** sets the margin for the right of the container\n- **margin-bottom:** sets the margin for the bottom of the container\n- **margin-left:** sets the margin for the left of the container\n\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        h1 {\n            margin: auto;\n        }\n        p {\n            margin: 10px 20px 10px 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to my blog!</h1>\n    <p>Here I will write about my life and adventures.</p>\n</body>\n```\n\nFor a full list of possible CSS properties and values, visit [W3 Schools](https://www.w3schools.com/cssref/)\n\n### Padding\n\nThe padding is the amount of space between the content in the element and the border of the element. The padding is set with a value of pixels.\nUnlike margin, it cannot be set to auto.\n- **padding:** shorthand to set the padding of top, right, bottom, and left (in that order)\n- **padding-top:** sets the padding for the top of the container\n- **padding-right:** sets the padding for the right of the container\n- **padding-bottom:** sets the padding for the bottom of the container\n- **padding-left:** sets the padding for the left of the container\n\n```html\n<head>\n    <title>Your Page Title</title>\n    <style>\n        h1 {\n            margin: auto;\n            padding-top: 15px;\n            padding-bottom: 15 px;\n        }\n        p {\n            margin: 10px 20px 10px 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Welcome to my blog!</h1>\n    <p>Here I will write about my life and adventures.</p>\n</body>\n```\n\nFor a full list of possible CSS properties and values, visit [W3 Schools](https://www.w3schools.com/cssref/)\n\nBootstrap\n---------\n\n### Bootstrap Basics\n\nBootstrap is a free library for creating professional, responsive, mobile web pages. Bootstrap provides several premade HTML components and CSS classes that you can use to make your pages look clean and professional on all devices\n\n### Adding Bootstrap\n\nTo add Bootstrap to your web page, you simply need to add a few tags to the head element to import the Bootstrap CSS and JavaScript code.\nHere is the starting template for a Bootstrap page:\n\n```html\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset="utf-8">\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\n        <meta name="viewport" content="width=device-width, initial-scale=1">\n\n        <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js"><\/script>\n\n        \x3c!-- Bootstrap CSS --\x3e\n        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">\n\n        \x3c!-- Bootstrap JavaScript --\x3e\n        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"><\/script>\n    </head>\n    <body>\n        \x3c!-- Your HTML code here --\x3e\n    </body>\n</html>\n```\n\n### More Bootstrap\n\nFor full Bootstrap documentation visit the [Bootstrap Site](https://getbootstrap.com/css/)\n');break;default:n="Not yet implemented"}return l.a.createElement("div",{className:p.a.docs},l.a.createElement("div",{className:p.a.markdownBody,dangerouslySetInnerHTML:{__html:n}}))}}]),t}(s.Component)}}]);